# @package models
defaults:
  - segmentation/default


Res16UNet34:
    class: sparseconv3d.APIModel
    conv_type: "SPARSE"
    backend: "torchsparse"
    backbone:
        define_constants:
            in_feat: 32
            block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py
        down_conv:
            module_name: ResNetDown
            block: block
            N: [ 0, 2, 3, 4, 6 ]
            down_conv_nn:
                [
                    [ FEAT, in_feat ],
                    [ in_feat, in_feat ],
                    [ in_feat, 2*in_feat ],
                    [ 2*in_feat, 4*in_feat ],
                    [ 4*in_feat, 8*in_feat ],
                ]
            kernel_size: [ 3, 2, 2, 2, 2 ]
            stride: [ 1, 2, 2, 2, 2 ]
        up_conv:
            block: block
            module_name: ResNetUp
            N: [ 1, 1, 1, 1, 1 ]
            up_conv_nn:
                [
                    [ 8*in_feat, 4*in_feat, 4*in_feat ],
                    [ 4*in_feat, 2*in_feat, 4*in_feat ],
                    [ 4*in_feat, in_feat, 3*in_feat ],
                    [ 3*in_feat, in_feat, 3*in_feat ],
                    [ 3*in_feat, 0, 3*in_feat ],
                ]
            kernel_size: [ 2, 2, 2, 2, 3 ]
            stride: [ 2, 2, 2, 2, 1 ]
            

Res16UNet34-3D-only-baseline:
    # 28.1 M params - 109.4 Mo on the GPU - ~2.7 ko/pixel at training time
    class: sparseconv3d.APIModel
    conv_type: "SPARSE"
    backend: "torchsparse"
    backbone: # backbone offset specific for Sparse conv application builder
        define_constants:
            in_feat: 32
#             in_feat_img: 4
#             in_feat_map: 8
#             in_feat_attention: 4
            block: ResBlock # Can be any of the blocks in modules/MinkowskiEngine/api_modules.py
#             l0: 128
#             l1: 64
#             l2: 128
#             l3: 256
#             l4: 512
#             l0_map: 32
#             l1_map: 32
#             l2_map: 64
#             l3_map: 128
#             l4_map: 256

        down_conv:
            n_early_conv: 5
            module_name: ResNetDown
            block: block
            conv3d_after_fusion: False
            N: [ 0, 2, 3, 4, 6 ]
            kernel_size: [ 3, 2, 2, 2, 2 ]
            stride: [ 1, 2, 2, 2, 2 ]
            down_conv_nn:
              [
                  [ FEAT + l0_map + l1_map + l2_map + l3_map + l4_map, 4*in_feat ],
                  [ 4*in_feat, in_feat ],
                  [ in_feat, 2*in_feat ],
                  [ 2*in_feat, 4*in_feat ],
                  [ 4*in_feat, 8*in_feat ],
              ]

#             image:
#                 down_conv:
#                     module_name: [
#                         ADE20KResNet18Layer0,
#                         ADE20KResNet18Layer1,
#                         ADE20KResNet18Layer2,
#                         ADE20KResNet18Layer3,
#                         ADE20KResNet18Layer4 ]
#                 atomic_pooling:
#                     module_name: BimodalCSRPool
#                     mode: max
#                 view_pooling:
#                     module_name: GroupBimodalCSRPool
#                     in_map: 8
#                     in_mod: [ l0, l1, l2, l3, l4 ]
#                     out_mod: [ l0_map, l1_map, l2_map, l3_map, l4_map ]
#                     num_groups: 4
#                     use_mod: False
#                     map_encoder: DeepSetFeat
#                     use_num: True
#                 fusion:
#                     module_name: BimodalFusion
#                     mode: concatenation
#                 branching_index: [ 0, 1, 2, 3, 4 ]
#                 out_channels: [
#                         FEAT + l0_map,
#                         FEAT + l0_map + l1_map,
#                         FEAT + l0_map + l1_map + l2_map,
#                         FEAT + l0_map + l1_map + l2_map + l3_map,
#                         FEAT + l0_map + l1_map + l2_map + l3_map + l4_map ]  # This is necessary to support batches with no images
#                 checkpointing: v
#                 interpolate: True

        up_conv:
            block: block
            module_name: ResNetUp
            N: [ 1, 1, 1, 1, 1 ]
            kernel_size: [ 2, 2, 2, 2, 3 ]
            stride: [ 2, 2, 2, 2, 1 ]
            up_conv_nn:
                [
                  [ 8*in_feat, 4*in_feat, 4*in_feat ],
                  [ 4*in_feat, 2*in_feat, 4*in_feat ],
                  [ 4*in_feat, in_feat, 3*in_feat ],
                  [ 3*in_feat, 4*in_feat, 3*in_feat ],
                  [ 3*in_feat, 0, 3*in_feat ],
                ]