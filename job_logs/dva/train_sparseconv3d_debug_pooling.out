[2022-10-18 19:24:24,211][torch_points3d.trainer][INFO] - DEVICE : cuda
wandb: W&B is a tool that helps track and visualize machine learning experiments
wandb: No credentials found.  Run "wandb login" to visualize your metrics
wandb: Tracking run with wandb version 0.8.36
wandb: Wandb version 0.13.4 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Run data is saved locally in wandb/run-20221018_172424-1ds28jfk

self._cfg.training.checkpoint_dir:  
initialize train dataset
initialize val dataset
task:  segmentation.multimodal
tested_model_name:  Res16UNet34-PointPyramid-early-ade20k-interpolate
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
class_name:  APIModel
model_cls:  <class 'torch_points3d.models.segmentation.sparseconv3d.APIModel'>
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-18 19:24:49,328][torch_points3d.applications.modelfactory][INFO] - The config will be used to build the model
model:  APIModel(
  (backbone): SparseConv3dUnet(
    (inner_modules): ModuleList(
      (0): Identity()
    )
    (down_modules): ModuleList(
      (0): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer0(
            (conv): Sequential(
              (0): Sequential(
                (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (4): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
                (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (7): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (8): ReLU(inplace=True)
                (9): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=128, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=32, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (1): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer1(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=64, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=32, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (2): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer2(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=128, out_features=64, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (3): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer3(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn2): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn2): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=256, out_features=128, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=128, out_features=128, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (4): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer4(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn2): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn2): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=512, out_features=256, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=256, out_features=256, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (5): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=513, out_channels=128, kernel_size=3, stride=1, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (6): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=128, out_channels=32, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (7): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=32, out_channels=32, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=32, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=32, out_channels=64, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (8): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=64, out_channels=64, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=64, out_channels=128, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (3): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (9): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=128, out_channels=256, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (3): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (4): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (5): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
    )
    (up_modules): ModuleList(
      (0): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=256, out_channels=256, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=384, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=384, out_channels=128, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (1): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=192, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=192, out_channels=128, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (2): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=160, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=160, out_channels=96, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (3): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=96, out_channels=96, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=224, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=224, out_channels=96, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (4): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
          (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
          )
        )
      )
    )
  )
  (head): Sequential(
    (0): Linear(in_features=96, out_features=20, bias=True)
  )
)
backbone.down_modules.4.image.conv
backbone.down_modules.3.image.conv
backbone.down_modules.2.image.conv
backbone.down_modules.1.image.conv
backbone.down_modules.0.image.conv
backbone
head
[2022-10-18 19:24:50,788][torch_points3d.core.schedulers.bn_schedulers][INFO] - Setting batchnorm momentum at 0.02
task:  segmentation.multimodal
tested_model_name:  Res16UNet34-PointPyramid-early-ade20k-interpolate
[2022-10-18 19:24:58,117][torch_points3d.trainer][WARNING] - The model will not be able to be used from pretrained weights without the corresponding dataset. Current properties are {'feature_dimension': 1, 'num_classes': 20}
[2022-10-18 19:24:58,118][torch_points3d.trainer][INFO] - APIModel(
  (backbone): SparseConv3dUnet(
    (inner_modules): ModuleList(
      (0): Identity()
    )
    (down_modules): ModuleList(
      (0): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer0(
            (conv): Sequential(
              (0): Sequential(
                (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (4): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
                (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (7): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (8): ReLU(inplace=True)
                (9): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=128, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=32, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (1): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer1(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=64, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=32, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (2): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer2(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=128, out_features=64, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (3): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer3(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn2): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn2): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=256, out_features=128, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=128, out_features=128, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (4): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer4(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn2): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn2): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=512, out_features=256, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=256, out_features=256, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (5): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=513, out_channels=128, kernel_size=3, stride=1, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (6): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=128, out_channels=32, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (7): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=32, out_channels=32, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=32, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=32, out_channels=64, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (8): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=64, out_channels=64, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=64, out_channels=128, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (3): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (9): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=128, out_channels=256, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (3): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (4): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (5): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
    )
    (up_modules): ModuleList(
      (0): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=256, out_channels=256, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=384, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=384, out_channels=128, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (1): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=192, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=192, out_channels=128, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (2): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=160, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=160, out_channels=96, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (3): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=96, out_channels=96, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=224, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=224, out_channels=96, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (4): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
          (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
          )
        )
      )
    )
  )
  (head): Sequential(
    (0): Linear(in_features=96, out_features=20, bias=True)
  )
)
[2022-10-18 19:24:58,128][torch_points3d.utils.colors][INFO] - [0;32mOptimizer: SGD (
Parameter Group 0
    dampening: 0.1
    foreach: None
    initial_lr: 0.1
    lr: 0.1
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 1
    dampening: 0.1
    foreach: None
    initial_lr: 0.1
    lr: 0.1
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 2
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 3
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 4
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 5
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 6
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001
)[0m
[2022-10-18 19:24:58,128][torch_points3d.utils.colors][INFO] - [0;32mLearning Rate Scheduler: ExponentialLR({'gamma': 0.9885}, update_scheduler_on=on_epoch)[0m
[2022-10-18 19:24:58,128][torch_points3d.utils.colors][INFO] - [0;32mBatchNorm Scheduler: BNMomentumScheduler(base_momentum: 0.02, update_scheduler_on=on_epoch)[0m
[2022-10-18 19:24:58,128][torch_points3d.utils.colors][INFO] - [0;32mAccumulated gradients: None[0m
[2022-10-18 19:24:58,130][torch_points3d.trainer][INFO] - Model size = 44322864
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-18 19:24:58,131][torch_points3d.trainer][INFO] - Dataset: ScannetDatasetMM 
[0;95mtrain_pre_batch_collate_transform [0m= None
[0;95mval_pre_batch_collate_transform [0m= None
[0;95mtest_pre_batch_collate_transform [0m= None
[0;95mpre_transform [0m= Compose([
    SaveOriginalPosId,
    PCAComputePointwise(num_neighbors=50, r=None, use_full_pos=False, use_cuda=False, use_faiss=False, ncells=None, nprobes=10, chunk_size=1000000),
    EigenFeatures(norm=True, linearity=True, planarity=True, scattering=True, temperature=None),
    RemoveAttributes(attr_names=['eigenvalues', 'eigenvectors'], strict=False),
])
[0;95mtest_transform [0m= Compose([
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95mtrain_transform [0m= Compose([
    ElasticDistortion(apply_distorsion=True, granularity=[0.2, 0.8], magnitude=[0.4, 1.6]),
    Random3AxisRotation(apply_rotation=True, rot_x=8, rot_y=8, rot_z=180),
    Random symmetry of axes: x=True, y=True, z=False,
    RandomScaleAnisotropic([0.9, 1.1]),
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95mval_transform [0m= Compose([
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95minference_transform [0m= Compose([
    SaveOriginalPosId,
    PCAComputePointwise(num_neighbors=50, r=None, use_full_pos=False, use_cuda=False, use_faiss=False, ncells=None, nprobes=10, chunk_size=1000000),
    EigenFeatures(norm=True, linearity=True, planarity=True, scattering=True, temperature=None),
    RemoveAttributes(attr_names=['eigenvalues', 'eigenvectors'], strict=False),
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95mpre_transform_image [0m= ComposeMultiModal([
    LoadImages(ref_size=[320, 240], crop_size=None, crop_offsets=None, downscale=None, show_progress=False),
    NonStaticMask(ref_size=(320, 240), proj_upscale=1, n_sample=5),
    MapImages(key=mapping_index, verbose=False, cylinder=False, ref_size=[320, 240], proj_upscale=1, method=SplattingVisibility, use_cuda=False, kwargs={'voxel': 0.03, 'r_max': 8, 'r_min': 0.05, 'exact': True, 'camera': 'scannet'}),
    NeighborhoodBasedMappingFeatures(k_list=[50], voxel=0.01, compute_density=True, compute_occlusion=True, use_faiss=False, use_cuda=False, ncells=None, nprobes=10, verbose=True),
])
[0;95mtest_transform_image [0m= ComposeMultiModal([
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
[0;95mtrain_transform_image [0m= ComposeMultiModal([
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    JitterMappingFeatures(sigma=0.02, clip=0.03),
    ColorJitter(brightness=[0.4, 1.6], contrast=[0.4, 1.6], saturation=[0.30000000000000004, 1.7], hue=None),
    RandomHorizontalFlip(p=0.5),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
[0;95mval_transform_image [0m= ComposeMultiModal([
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
[0;95minference_transform_image [0m= ComposeMultiModal([
    LoadImages(ref_size=[320, 240], crop_size=None, crop_offsets=None, downscale=None, show_progress=False),
    NonStaticMask(ref_size=(320, 240), proj_upscale=1, n_sample=5),
    MapImages(key=mapping_index, verbose=False, cylinder=False, ref_size=[320, 240], proj_upscale=1, method=SplattingVisibility, use_cuda=False, kwargs={'voxel': 0.03, 'r_max': 8, 'r_min': 0.05, 'exact': True, 'camera': 'scannet'}),
    NeighborhoodBasedMappingFeatures(k_list=[50], voxel=0.01, compute_density=True, compute_occlusion=True, use_faiss=False, use_cuda=False, ncells=None, nprobes=10, verbose=True),
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
Size of [0;95mtrain_dataset [0m= 1201
Size of [0;95mtest_dataset [0m= 0
Size of [0;95mval_dataset [0m= 312
[0;95mBatch size =[0m 2
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-18 19:25:00,830][torch_points3d.datasets.base_dataset][INFO] - Available stage selection datasets: [0;95m ['val'] [0m
[2022-10-18 19:25:00,831][torch_points3d.datasets.base_dataset][INFO] - The models will be selected using the metrics on following dataset: [0;95m val [0m
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-18 19:25:03,098][torch_points3d.trainer][INFO] - EPOCH 1 / 300
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
  0% 0/601 [00:00<?, ?it/s]  0% 0/601 [00:17<?, ?it/s, [0;92mdata_loading=12.52, iteration=4.982, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  0% 1/601 [00:17<2:55:02, 17.50s/it, [0;92mdata_loading=12.52, iteration=4.982, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  0% 1/601 [00:18<2:55:02, 17.50s/it, [0;92mdata_loading=0.000, iteration=1.425, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  0% 2/601 [00:18<1:20:20,  8.05s/it, [0;92mdata_loading=0.000, iteration=1.425, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  0% 2/601 [00:20<1:20:20,  8.05s/it, [0;92mdata_loading=0.000, iteration=1.231, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  0% 3/601 [00:20<49:11,  4.94s/it, [0;92mdata_loading=0.000, iteration=1.231, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]    0% 3/601 [00:22<49:11,  4.94s/it, [0;92mdata_loading=0.109, iteration=1.894, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 4/601 [00:22<37:35,  3.78s/it, [0;92mdata_loading=0.109, iteration=1.894, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 4/601 [00:23<37:35,  3.78s/it, [0;92mdata_loading=0.000, iteration=1.254, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 5/601 [00:23<28:29,  2.87s/it, [0;92mdata_loading=0.000, iteration=1.254, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 5/601 [00:24<28:29,  2.87s/it, [0;92mdata_loading=0.000, iteration=0.904, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 6/601 [00:24<21:49,  2.20s/it, [0;92mdata_loading=0.000, iteration=0.904, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 6/601 [00:25<21:49,  2.20s/it, [0;92mdata_loading=0.000, iteration=1.200, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 7/601 [00:25<18:33,  1.87s/it, [0;92mdata_loading=0.000, iteration=1.200, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 7/601 [00:27<18:33,  1.87s/it, [0;92mdata_loading=0.000, iteration=1.654, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 8/601 [00:27<17:49,  1.80s/it, [0;92mdata_loading=0.000, iteration=1.654, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 8/601 [00:28<17:49,  1.80s/it, [0;92mdata_loading=0.089, iteration=1.493, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 9/601 [00:28<17:07,  1.74s/it, [0;92mdata_loading=0.089, iteration=1.493, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  1% 9/601 [00:30<17:07,  1.74s/it, [0;92mdata_loading=0.000, iteration=1.924, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  2% 10/601 [00:30<17:40,  1.79s/it, [0;92mdata_loading=0.000, iteration=1.924, train_acc=4.679, train_loss_cross_entropy=3.119, train_loss_seg=3.119, train_macc=5.691, train_miou=1.053[0m)]  2% 10/601 [00:32<17:40,  1.79s/it, [0;92mdata_loading=0.000, iteration=1.847, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 11/601 [00:32<17:48,  1.81s/it, [0;92mdata_loading=0.000, iteration=1.847, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 11/601 [00:33<17:48,  1.81s/it, [0;92mdata_loading=0.000, iteration=1.415, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 12/601 [00:33<16:35,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.415, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 12/601 [00:35<16:35,  1.69s/it, [0;92mdata_loading=0.010, iteration=1.434, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 13/601 [00:35<15:50,  1.62s/it, [0;92mdata_loading=0.010, iteration=1.434, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 13/601 [00:36<15:50,  1.62s/it, [0;92mdata_loading=0.020, iteration=1.495, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 14/601 [00:36<15:31,  1.59s/it, [0;92mdata_loading=0.020, iteration=1.495, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 14/601 [00:38<15:31,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.116, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 15/601 [00:38<14:06,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.116, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  2% 15/601 [00:39<14:06,  1.44s/it, [0;92mdata_loading=0.018, iteration=1.733, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 16/601 [00:39<14:59,  1.54s/it, [0;92mdata_loading=0.018, iteration=1.733, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 16/601 [00:41<14:59,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.582, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 17/601 [00:41<15:07,  1.55s/it, [0;92mdata_loading=0.011, iteration=1.582, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 17/601 [00:42<15:07,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.239, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 18/601 [00:42<14:11,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.239, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 18/601 [00:44<14:11,  1.46s/it, [0;92mdata_loading=0.021, iteration=2.169, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 19/601 [00:44<16:17,  1.68s/it, [0;92mdata_loading=0.021, iteration=2.169, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 19/601 [00:46<16:17,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.842, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 20/601 [00:46<16:44,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.842, train_acc=39.93, train_loss_cross_entropy=2.274, train_loss_seg=2.274, train_macc=11.91, train_miou=5.828[0m)]  3% 20/601 [00:48<16:44,  1.73s/it, [0;92mdata_loading=0.010, iteration=1.756, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  3% 21/601 [00:48<16:49,  1.74s/it, [0;92mdata_loading=0.010, iteration=1.756, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  3% 21/601 [00:50<16:49,  1.74s/it, [0;92mdata_loading=0.020, iteration=1.623, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 22/601 [00:50<16:30,  1.71s/it, [0;92mdata_loading=0.020, iteration=1.623, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 22/601 [00:51<16:30,  1.71s/it, [0;92mdata_loading=0.000, iteration=1.591, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 23/601 [00:51<16:08,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.591, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 23/601 [00:53<16:08,  1.68s/it, [0;92mdata_loading=0.020, iteration=1.518, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 24/601 [00:53<15:43,  1.63s/it, [0;92mdata_loading=0.020, iteration=1.518, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 24/601 [00:54<15:43,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.295, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 25/601 [00:54<14:43,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.295, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 25/601 [00:55<14:43,  1.53s/it, [0;92mdata_loading=0.010, iteration=1.451, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 26/601 [00:55<14:29,  1.51s/it, [0;92mdata_loading=0.010, iteration=1.451, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 26/601 [00:57<14:29,  1.51s/it, [0;92mdata_loading=0.026, iteration=1.277, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 27/601 [00:57<13:51,  1.45s/it, [0;92mdata_loading=0.026, iteration=1.277, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  4% 27/601 [00:58<13:51,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.623, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  5% 28/601 [00:58<14:20,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.623, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  5% 28/601 [01:00<14:20,  1.50s/it, [0;92mdata_loading=0.010, iteration=1.671, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  5% 29/601 [01:00<14:50,  1.56s/it, [0;92mdata_loading=0.010, iteration=1.671, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  5% 29/601 [01:02<14:50,  1.56s/it, [0;92mdata_loading=0.011, iteration=1.802, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  5% 30/601 [01:02<15:32,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.802, train_acc=46.32, train_loss_cross_entropy=2.037, train_loss_seg=2.037, train_macc=11.92, train_miou=6.794[0m)]  5% 30/601 [01:03<15:32,  1.63s/it, [0;92mdata_loading=0.008, iteration=1.567, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  5% 31/601 [01:03<15:21,  1.62s/it, [0;92mdata_loading=0.008, iteration=1.567, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  5% 31/601 [01:05<15:21,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.546, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  5% 32/601 [01:05<15:09,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.546, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  5% 32/601 [01:07<15:09,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.908, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  5% 33/601 [01:07<16:02,  1.70s/it, [0;92mdata_loading=0.011, iteration=1.908, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  5% 33/601 [01:09<16:02,  1.70s/it, [0;92mdata_loading=0.024, iteration=1.861, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 34/601 [01:09<16:33,  1.75s/it, [0;92mdata_loading=0.024, iteration=1.861, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 34/601 [01:10<16:33,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.273, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 35/601 [01:10<15:10,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.273, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 35/601 [01:12<15:10,  1.61s/it, [0;92mdata_loading=0.020, iteration=1.706, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 36/601 [01:12<15:29,  1.64s/it, [0;92mdata_loading=0.020, iteration=1.706, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 36/601 [01:13<15:29,  1.64s/it, [0;92mdata_loading=0.011, iteration=1.651, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 37/601 [01:13<15:30,  1.65s/it, [0;92mdata_loading=0.011, iteration=1.651, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 37/601 [01:15<15:30,  1.65s/it, [0;92mdata_loading=0.010, iteration=1.468, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 38/601 [01:15<15:00,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.468, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 38/601 [01:17<15:00,  1.60s/it, [0;92mdata_loading=0.022, iteration=1.512, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 39/601 [01:17<14:47,  1.58s/it, [0;92mdata_loading=0.022, iteration=1.512, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  6% 39/601 [01:18<14:47,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.265, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  7% 40/601 [01:18<13:53,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.265, train_acc=49.00, train_loss_cross_entropy=1.895, train_loss_seg=1.895, train_macc=13.14, train_miou=7.328[0m)]  7% 40/601 [01:19<13:53,  1.49s/it, [0;92mdata_loading=0.010, iteration=1.441, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 41/601 [01:19<13:46,  1.48s/it, [0;92mdata_loading=0.010, iteration=1.441, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 41/601 [01:21<13:46,  1.48s/it, [0;92mdata_loading=0.015, iteration=1.795, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 42/601 [01:21<14:41,  1.58s/it, [0;92mdata_loading=0.015, iteration=1.795, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 42/601 [01:22<14:41,  1.58s/it, [0;92mdata_loading=0.015, iteration=1.446, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 43/601 [01:22<14:20,  1.54s/it, [0;92mdata_loading=0.015, iteration=1.446, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 43/601 [01:24<14:20,  1.54s/it, [0;92mdata_loading=0.017, iteration=1.692, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 44/601 [01:24<14:47,  1.59s/it, [0;92mdata_loading=0.017, iteration=1.692, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 44/601 [01:26<14:47,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.629, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 45/601 [01:26<14:51,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.629, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  7% 45/601 [01:27<14:51,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.577, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 46/601 [01:27<14:47,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.577, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 46/601 [01:29<14:47,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.528, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 47/601 [01:29<14:36,  1.58s/it, [0;92mdata_loading=0.011, iteration=1.528, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 47/601 [01:31<14:36,  1.58s/it, [0;92mdata_loading=0.010, iteration=1.543, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 48/601 [01:31<14:30,  1.57s/it, [0;92mdata_loading=0.010, iteration=1.543, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 48/601 [01:32<14:30,  1.57s/it, [0;92mdata_loading=0.022, iteration=1.489, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 49/601 [01:32<14:18,  1.56s/it, [0;92mdata_loading=0.022, iteration=1.489, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 49/601 [01:34<14:18,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.856, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 50/601 [01:34<15:06,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.856, train_acc=51.49, train_loss_cross_entropy=1.759, train_loss_seg=1.759, train_macc=13.57, train_miou=7.610[0m)]  8% 50/601 [01:36<15:06,  1.65s/it, [0;92mdata_loading=0.011, iteration=1.7  , train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  8% 51/601 [01:36<15:16,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.7  , train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  8% 51/601 [01:37<15:16,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.548, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 52/601 [01:37<14:57,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.548, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 52/601 [01:39<14:57,  1.63s/it, [0;92mdata_loading=0.010, iteration=1.701, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 53/601 [01:39<15:08,  1.66s/it, [0;92mdata_loading=0.010, iteration=1.701, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 53/601 [01:40<15:08,  1.66s/it, [0;92mdata_loading=0.025, iteration=1.359, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 54/601 [01:40<14:21,  1.58s/it, [0;92mdata_loading=0.025, iteration=1.359, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 54/601 [01:42<14:21,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.380, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 55/601 [01:42<13:48,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.380, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 55/601 [01:43<13:48,  1.52s/it, [0;92mdata_loading=0.010, iteration=1.683, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 56/601 [01:43<14:15,  1.57s/it, [0;92mdata_loading=0.010, iteration=1.683, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 56/601 [01:45<14:15,  1.57s/it, [0;92mdata_loading=0.016, iteration=1.737, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 57/601 [01:45<14:44,  1.63s/it, [0;92mdata_loading=0.016, iteration=1.737, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)]  9% 57/601 [01:46<14:44,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.333, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)] 10% 58/601 [01:46<13:56,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.333, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)] 10% 58/601 [01:48<13:56,  1.54s/it, [0;92mdata_loading=0.016, iteration=1.758, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)] 10% 59/601 [01:48<14:33,  1.61s/it, [0;92mdata_loading=0.016, iteration=1.758, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)] 10% 59/601 [01:49<14:33,  1.61s/it, [0;92mdata_loading=0.000, iteration=0.979, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)] 10% 60/601 [01:49<12:49,  1.42s/it, [0;92mdata_loading=0.000, iteration=0.979, train_acc=52.84, train_loss_cross_entropy=1.685, train_loss_seg=1.685, train_macc=13.80, train_miou=8.067[0m)] 10% 60/601 [01:50<12:49,  1.42s/it, [0;92mdata_loading=0.016, iteration=1.108, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 10% 61/601 [01:50<11:59,  1.33s/it, [0;92mdata_loading=0.016, iteration=1.108, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 10% 61/601 [01:52<11:59,  1.33s/it, [0;92mdata_loading=0.022, iteration=1.937, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 10% 62/601 [01:52<13:39,  1.52s/it, [0;92mdata_loading=0.022, iteration=1.937, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 10% 62/601 [01:54<13:39,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.296, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 10% 63/601 [01:54<13:02,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.296, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 10% 63/601 [01:55<13:02,  1.45s/it, [0;92mdata_loading=0.018, iteration=1.776, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 64/601 [01:55<13:55,  1.56s/it, [0;92mdata_loading=0.018, iteration=1.776, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 64/601 [01:57<13:55,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.481, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 65/601 [01:57<13:42,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.481, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 65/601 [01:59<13:42,  1.53s/it, [0;92mdata_loading=0.011, iteration=1.656, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 66/601 [01:59<14:02,  1.57s/it, [0;92mdata_loading=0.011, iteration=1.656, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 66/601 [02:00<14:02,  1.57s/it, [0;92mdata_loading=0.016, iteration=1.267, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 67/601 [02:00<13:14,  1.49s/it, [0;92mdata_loading=0.016, iteration=1.267, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 67/601 [02:01<13:14,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.319, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 68/601 [02:01<12:45,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.319, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 68/601 [02:03<12:45,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.903, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 69/601 [02:03<14:00,  1.58s/it, [0;92mdata_loading=0.010, iteration=1.903, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 11% 69/601 [02:05<14:00,  1.58s/it, [0;92mdata_loading=0.063, iteration=2.058, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 12% 70/601 [02:05<15:25,  1.74s/it, [0;92mdata_loading=0.063, iteration=2.058, train_acc=54.12, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.14, train_miou=8.164[0m)] 12% 70/601 [02:07<15:25,  1.74s/it, [0;92mdata_loading=0.000, iteration=1.767, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 71/601 [02:07<15:27,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.767, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 71/601 [02:08<15:27,  1.75s/it, [0;92mdata_loading=0.01 , iteration=1.456, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 72/601 [02:08<14:41,  1.67s/it, [0;92mdata_loading=0.01 , iteration=1.456, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 72/601 [02:10<14:41,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.333, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 73/601 [02:10<13:46,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.333, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 73/601 [02:12<13:46,  1.57s/it, [0;92mdata_loading=0.021, iteration=1.814, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 74/601 [02:12<14:28,  1.65s/it, [0;92mdata_loading=0.021, iteration=1.814, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 74/601 [02:13<14:28,  1.65s/it, [0;92mdata_loading=0.016, iteration=1.12 , train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 75/601 [02:13<13:05,  1.49s/it, [0;92mdata_loading=0.016, iteration=1.12 , train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 12% 75/601 [02:14<13:05,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.083, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 76/601 [02:14<11:59,  1.37s/it, [0;92mdata_loading=0.000, iteration=1.083, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 76/601 [02:15<11:59,  1.37s/it, [0;92mdata_loading=0.010, iteration=1.430, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 77/601 [02:15<12:09,  1.39s/it, [0;92mdata_loading=0.010, iteration=1.430, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 77/601 [02:17<12:09,  1.39s/it, [0;92mdata_loading=0.000, iteration=1.444, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 78/601 [02:17<12:16,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.444, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 78/601 [02:18<12:16,  1.41s/it, [0;92mdata_loading=0.010, iteration=1.662, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 79/601 [02:18<12:56,  1.49s/it, [0;92mdata_loading=0.010, iteration=1.662, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 79/601 [02:20<12:56,  1.49s/it, [0;92mdata_loading=0.022, iteration=1.709, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 80/601 [02:20<13:33,  1.56s/it, [0;92mdata_loading=0.022, iteration=1.709, train_acc=56.62, train_loss_cross_entropy=1.530, train_loss_seg=1.530, train_macc=14.33, train_miou=8.855[0m)] 13% 80/601 [02:22<13:33,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.437, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 13% 81/601 [02:22<13:12,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.437, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 13% 81/601 [02:24<13:12,  1.52s/it, [0;92mdata_loading=0.011, iteration=2.020, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 82/601 [02:24<14:30,  1.68s/it, [0;92mdata_loading=0.011, iteration=2.020, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 82/601 [02:25<14:30,  1.68s/it, [0;92mdata_loading=0.013, iteration=1.587, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 83/601 [02:25<14:16,  1.65s/it, [0;92mdata_loading=0.013, iteration=1.587, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 83/601 [02:27<14:16,  1.65s/it, [0;92mdata_loading=0.010, iteration=1.565, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 84/601 [02:27<14:03,  1.63s/it, [0;92mdata_loading=0.010, iteration=1.565, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 84/601 [02:29<14:03,  1.63s/it, [0;92mdata_loading=0.055, iteration=1.939, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 85/601 [02:29<14:58,  1.74s/it, [0;92mdata_loading=0.055, iteration=1.939, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 85/601 [02:30<14:58,  1.74s/it, [0;92mdata_loading=0.000, iteration=1.277, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 86/601 [02:30<13:44,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.277, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 86/601 [02:32<13:44,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.655, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 87/601 [02:32<13:51,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.655, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 14% 87/601 [02:34<13:51,  1.62s/it, [0;92mdata_loading=0.196, iteration=1.859, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 15% 88/601 [02:34<14:57,  1.75s/it, [0;92mdata_loading=0.196, iteration=1.859, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 15% 88/601 [02:35<14:57,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.780, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 15% 89/601 [02:35<15:00,  1.76s/it, [0;92mdata_loading=0.000, iteration=1.780, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 15% 89/601 [02:36<15:00,  1.76s/it, [0;92mdata_loading=0.000, iteration=0.868, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 15% 90/601 [02:36<12:42,  1.49s/it, [0;92mdata_loading=0.000, iteration=0.868, train_acc=57.64, train_loss_cross_entropy=1.478, train_loss_seg=1.478, train_macc=14.90, train_miou=9.210[0m)] 15% 90/601 [02:38<12:42,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.414, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 15% 91/601 [02:38<12:29,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.414, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 15% 91/601 [02:40<12:29,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.769, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 15% 92/601 [02:40<13:13,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.769, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 15% 92/601 [02:41<13:13,  1.56s/it, [0;92mdata_loading=0.069, iteration=1.579, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 15% 93/601 [02:41<13:25,  1.59s/it, [0;92mdata_loading=0.069, iteration=1.579, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 15% 93/601 [02:43<13:25,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.536, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 94/601 [02:43<13:16,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.536, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 94/601 [02:44<13:16,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.730, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 95/601 [02:44<13:39,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.730, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 95/601 [02:46<13:39,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.536, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 96/601 [02:46<13:25,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.536, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 96/601 [02:48<13:25,  1.59s/it, [0;92mdata_loading=0.077, iteration=1.851, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 97/601 [02:48<14:14,  1.70s/it, [0;92mdata_loading=0.077, iteration=1.851, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 97/601 [02:49<14:14,  1.70s/it, [0;92mdata_loading=0.019, iteration=1.441, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 98/601 [02:49<13:37,  1.62s/it, [0;92mdata_loading=0.019, iteration=1.441, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 98/601 [02:51<13:37,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.509, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 99/601 [02:51<13:18,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.509, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 16% 99/601 [02:52<13:18,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.353, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 17% 100/601 [02:52<12:41,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.353, train_acc=57.95, train_loss_cross_entropy=1.461, train_loss_seg=1.461, train_macc=14.49, train_miou=9.693[0m)] 17% 100/601 [02:54<12:41,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.667, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 101/601 [02:54<13:02,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.667, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 101/601 [02:56<13:02,  1.56s/it, [0;92mdata_loading=0.017, iteration=1.594, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 102/601 [02:56<13:07,  1.58s/it, [0;92mdata_loading=0.017, iteration=1.594, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 102/601 [02:57<13:07,  1.58s/it, [0;92mdata_loading=0.011, iteration=1.524, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 103/601 [02:57<12:59,  1.57s/it, [0;92mdata_loading=0.011, iteration=1.524, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 103/601 [02:59<12:59,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.747, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 104/601 [02:59<13:25,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.747, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 104/601 [03:01<13:25,  1.62s/it, [0;92mdata_loading=0.027, iteration=1.753, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 105/601 [03:01<13:47,  1.67s/it, [0;92mdata_loading=0.027, iteration=1.753, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 17% 105/601 [03:02<13:47,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.428, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 106/601 [03:02<13:10,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.428, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 106/601 [03:04<13:10,  1.60s/it, [0;92mdata_loading=0.019, iteration=1.749, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 107/601 [03:04<13:34,  1.65s/it, [0;92mdata_loading=0.019, iteration=1.749, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 107/601 [03:06<13:34,  1.65s/it, [0;92mdata_loading=0.010, iteration=1.743, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 108/601 [03:06<13:48,  1.68s/it, [0;92mdata_loading=0.010, iteration=1.743, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 108/601 [03:07<13:48,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.106, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 109/601 [03:07<12:22,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.106, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 109/601 [03:08<12:22,  1.51s/it, [0;92mdata_loading=0.010, iteration=1.451, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 110/601 [03:08<12:14,  1.49s/it, [0;92mdata_loading=0.010, iteration=1.451, train_acc=59.15, train_loss_cross_entropy=1.413, train_loss_seg=1.413, train_macc=15.26, train_miou=10.30[0m)] 18% 110/601 [03:10<12:14,  1.49s/it, [0;92mdata_loading=0.010, iteration=1.833, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 18% 111/601 [03:10<13:03,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.833, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 18% 111/601 [03:12<13:03,  1.60s/it, [0;92mdata_loading=0.024, iteration=1.590, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 112/601 [03:12<13:04,  1.60s/it, [0;92mdata_loading=0.024, iteration=1.590, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 112/601 [03:13<13:04,  1.60s/it, [0;92mdata_loading=0.007, iteration=1.872, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 113/601 [03:13<13:43,  1.69s/it, [0;92mdata_loading=0.007, iteration=1.872, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 113/601 [03:15<13:43,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.182, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 114/601 [03:15<12:28,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.182, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 114/601 [03:16<12:28,  1.54s/it, [0;92mdata_loading=0.012, iteration=1.759, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 115/601 [03:16<13:00,  1.61s/it, [0;92mdata_loading=0.012, iteration=1.759, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 115/601 [03:18<13:00,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.767, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 116/601 [03:18<13:24,  1.66s/it, [0;92mdata_loading=0.010, iteration=1.767, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 116/601 [03:20<13:24,  1.66s/it, [0;92mdata_loading=0.011, iteration=1.334, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 117/601 [03:20<12:37,  1.56s/it, [0;92mdata_loading=0.011, iteration=1.334, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 19% 117/601 [03:21<12:37,  1.56s/it, [0;92mdata_loading=0.021, iteration=1.809, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 20% 118/601 [03:21<13:14,  1.64s/it, [0;92mdata_loading=0.021, iteration=1.809, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 20% 118/601 [03:23<13:14,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.485, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 20% 119/601 [03:23<12:49,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.485, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 20% 119/601 [03:25<12:49,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.623, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 20% 120/601 [03:25<12:53,  1.61s/it, [0;92mdata_loading=0.011, iteration=1.623, train_acc=60.02, train_loss_cross_entropy=1.397, train_loss_seg=1.397, train_macc=17.04, train_miou=11.47[0m)] 20% 120/601 [03:26<12:53,  1.61s/it, [0;92mdata_loading=0.015, iteration=1.584, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 20% 121/601 [03:26<12:50,  1.61s/it, [0;92mdata_loading=0.015, iteration=1.584, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 20% 121/601 [03:27<12:50,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.367, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 20% 122/601 [03:27<12:16,  1.54s/it, [0;92mdata_loading=0.010, iteration=1.367, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 20% 122/601 [03:29<12:16,  1.54s/it, [0;92mdata_loading=0.018, iteration=1.644, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 20% 123/601 [03:29<12:32,  1.58s/it, [0;92mdata_loading=0.018, iteration=1.644, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 20% 123/601 [03:31<12:32,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.704, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 124/601 [03:31<12:50,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.704, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 124/601 [03:32<12:50,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.375, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 125/601 [03:32<12:15,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.375, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 125/601 [03:34<12:15,  1.55s/it, [0;92mdata_loading=0.011, iteration=1.292, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 126/601 [03:34<11:39,  1.47s/it, [0;92mdata_loading=0.011, iteration=1.292, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 126/601 [03:35<11:39,  1.47s/it, [0;92mdata_loading=0.014, iteration=1.930, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 127/601 [03:35<12:45,  1.61s/it, [0;92mdata_loading=0.014, iteration=1.930, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 127/601 [03:37<12:45,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.385, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 128/601 [03:37<12:12,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.385, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 128/601 [03:39<12:12,  1.55s/it, [0;92mdata_loading=0.011, iteration=2.006, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 129/601 [03:39<13:17,  1.69s/it, [0;92mdata_loading=0.011, iteration=2.006, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 21% 129/601 [03:40<13:17,  1.69s/it, [0;92mdata_loading=0.011, iteration=1.247, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 22% 130/601 [03:40<12:15,  1.56s/it, [0;92mdata_loading=0.011, iteration=1.247, train_acc=61.22, train_loss_cross_entropy=1.362, train_loss_seg=1.362, train_macc=17.68, train_miou=12.02[0m)] 22% 130/601 [03:42<12:15,  1.56s/it, [0;92mdata_loading=0.011, iteration=1.917, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 131/601 [03:42<13:05,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.917, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 131/601 [03:44<13:05,  1.67s/it, [0;92mdata_loading=0.012, iteration=1.503, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 132/601 [03:44<12:42,  1.63s/it, [0;92mdata_loading=0.012, iteration=1.503, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 132/601 [03:45<12:42,  1.63s/it, [0;92mdata_loading=0.011, iteration=0.917, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 133/601 [03:45<11:02,  1.42s/it, [0;92mdata_loading=0.011, iteration=0.917, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 133/601 [03:46<11:02,  1.42s/it, [0;92mdata_loading=0.010, iteration=1.586, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 134/601 [03:46<11:26,  1.47s/it, [0;92mdata_loading=0.010, iteration=1.586, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 134/601 [03:48<11:26,  1.47s/it, [0;92mdata_loading=0.073, iteration=1.814, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 135/601 [03:48<12:23,  1.60s/it, [0;92mdata_loading=0.073, iteration=1.814, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 22% 135/601 [03:49<12:23,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.401, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 136/601 [03:49<11:55,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.401, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 136/601 [03:51<11:55,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.234, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 137/601 [03:51<11:11,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.234, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 137/601 [03:52<11:11,  1.45s/it, [0;92mdata_loading=0.010, iteration=1.477, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 138/601 [03:52<11:15,  1.46s/it, [0;92mdata_loading=0.010, iteration=1.477, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 138/601 [03:54<11:15,  1.46s/it, [0;92mdata_loading=0.009, iteration=1.522, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 139/601 [03:54<11:24,  1.48s/it, [0;92mdata_loading=0.009, iteration=1.522, train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 139/601 [03:55<11:24,  1.48s/it, [0;92mdata_loading=0.007, iteration=1.7  , train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 140/601 [03:55<11:54,  1.55s/it, [0;92mdata_loading=0.007, iteration=1.7  , train_acc=61.18, train_loss_cross_entropy=1.355, train_loss_seg=1.355, train_macc=17.79, train_miou=12.02[0m)] 23% 140/601 [03:57<11:54,  1.55s/it, [0;92mdata_loading=0.086, iteration=1.831, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 23% 141/601 [03:57<12:43,  1.66s/it, [0;92mdata_loading=0.086, iteration=1.831, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 23% 141/601 [03:59<12:43,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.500, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 142/601 [03:59<12:20,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.500, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 142/601 [04:00<12:20,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.460, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 143/601 [04:00<11:57,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.460, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 143/601 [04:01<11:57,  1.57s/it, [0;92mdata_loading=0.000, iteration=0.966, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 144/601 [04:01<10:33,  1.39s/it, [0;92mdata_loading=0.000, iteration=0.966, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 144/601 [04:02<10:33,  1.39s/it, [0;92mdata_loading=0.010, iteration=0.996, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 145/601 [04:02<09:40,  1.27s/it, [0;92mdata_loading=0.010, iteration=0.996, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 145/601 [04:04<09:40,  1.27s/it, [0;92mdata_loading=0.018, iteration=1.731, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 146/601 [04:04<10:44,  1.42s/it, [0;92mdata_loading=0.018, iteration=1.731, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 146/601 [04:05<10:44,  1.42s/it, [0;92mdata_loading=0.000, iteration=1.491, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 147/601 [04:05<10:53,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.491, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 24% 147/601 [04:07<10:53,  1.44s/it, [0;92mdata_loading=0.025, iteration=1.565, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 25% 148/601 [04:07<11:12,  1.48s/it, [0;92mdata_loading=0.025, iteration=1.565, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 25% 148/601 [04:09<11:12,  1.48s/it, [0;92mdata_loading=0.028, iteration=2.085, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 25% 149/601 [04:09<12:36,  1.67s/it, [0;92mdata_loading=0.028, iteration=2.085, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 25% 149/601 [04:11<12:36,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.464, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 25% 150/601 [04:11<12:06,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.464, train_acc=61.39, train_loss_cross_entropy=1.351, train_loss_seg=1.351, train_macc=18.78, train_miou=12.65[0m)] 25% 150/601 [04:12<12:06,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.711, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 25% 151/601 [04:12<12:18,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.711, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 25% 151/601 [04:14<12:18,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.561, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 25% 152/601 [04:14<12:06,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.561, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 25% 152/601 [04:16<12:06,  1.62s/it, [0;92mdata_loading=0.021, iteration=1.792, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 25% 153/601 [04:16<12:31,  1.68s/it, [0;92mdata_loading=0.021, iteration=1.792, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 25% 153/601 [04:17<12:31,  1.68s/it, [0;92mdata_loading=0.079, iteration=1.658, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 154/601 [04:17<12:37,  1.69s/it, [0;92mdata_loading=0.079, iteration=1.658, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 154/601 [04:19<12:37,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.572, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 155/601 [04:19<12:19,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.572, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 155/601 [04:20<12:19,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.437, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 156/601 [04:20<11:48,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.437, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 156/601 [04:22<11:48,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.225, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 157/601 [04:22<10:58,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.225, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 157/601 [04:23<10:58,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.467, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 158/601 [04:23<10:54,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.467, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 158/601 [04:25<10:54,  1.48s/it, [0;92mdata_loading=0.046, iteration=1.544, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 159/601 [04:25<11:08,  1.51s/it, [0;92mdata_loading=0.046, iteration=1.544, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 26% 159/601 [04:26<11:08,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.554, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 27% 160/601 [04:26<11:12,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.554, train_acc=61.53, train_loss_cross_entropy=1.340, train_loss_seg=1.340, train_macc=18.62, train_miou=12.50[0m)] 27% 160/601 [04:28<11:12,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.443, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 161/601 [04:28<11:00,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.443, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 161/601 [04:29<11:00,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.366, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 162/601 [04:29<10:41,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.366, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 162/601 [04:30<10:41,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.129, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 163/601 [04:30<09:56,  1.36s/it, [0;92mdata_loading=0.000, iteration=1.129, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 163/601 [04:32<09:56,  1.36s/it, [0;92mdata_loading=0.078, iteration=1.582, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 164/601 [04:32<10:34,  1.45s/it, [0;92mdata_loading=0.078, iteration=1.582, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 164/601 [04:33<10:34,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.377, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 165/601 [04:33<10:23,  1.43s/it, [0;92mdata_loading=0.000, iteration=1.377, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 27% 165/601 [04:35<10:23,  1.43s/it, [0;92mdata_loading=0.000, iteration=1.233, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 166/601 [04:35<09:56,  1.37s/it, [0;92mdata_loading=0.000, iteration=1.233, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 166/601 [04:37<09:56,  1.37s/it, [0;92mdata_loading=0.097, iteration=2.062, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 167/601 [04:37<11:37,  1.61s/it, [0;92mdata_loading=0.097, iteration=2.062, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 167/601 [04:38<11:37,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.564, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 168/601 [04:38<11:30,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.564, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 168/601 [04:40<11:30,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.559, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 169/601 [04:40<11:24,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.559, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 169/601 [04:41<11:24,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.343, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 170/601 [04:41<10:51,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.343, train_acc=61.69, train_loss_cross_entropy=1.337, train_loss_seg=1.337, train_macc=18.88, train_miou=12.64[0m)] 28% 170/601 [04:43<10:51,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.448, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 28% 171/601 [04:43<10:42,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.448, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 28% 171/601 [04:44<10:42,  1.49s/it, [0;92mdata_loading=0.021, iteration=1.470, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 172/601 [04:44<10:40,  1.49s/it, [0;92mdata_loading=0.021, iteration=1.470, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 172/601 [04:46<10:40,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.834, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 173/601 [04:46<11:22,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.834, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 173/601 [04:47<11:22,  1.60s/it, [0;92mdata_loading=0.012, iteration=1.376, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 174/601 [04:47<10:54,  1.53s/it, [0;92mdata_loading=0.012, iteration=1.376, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 174/601 [04:49<10:54,  1.53s/it, [0;92mdata_loading=0.021, iteration=1.898, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 175/601 [04:49<11:42,  1.65s/it, [0;92mdata_loading=0.021, iteration=1.898, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 175/601 [04:51<11:42,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.374, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 176/601 [04:51<11:06,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.374, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 176/601 [04:52<11:06,  1.57s/it, [0;92mdata_loading=0.009, iteration=1.271, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 177/601 [04:52<10:28,  1.48s/it, [0;92mdata_loading=0.009, iteration=1.271, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 29% 177/601 [04:53<10:28,  1.48s/it, [0;92mdata_loading=0.010, iteration=1.334, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 30% 178/601 [04:53<10:09,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.334, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 30% 178/601 [04:55<10:09,  1.44s/it, [0;92mdata_loading=0.008, iteration=1.311, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 30% 179/601 [04:55<09:52,  1.40s/it, [0;92mdata_loading=0.008, iteration=1.311, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 30% 179/601 [04:56<09:52,  1.40s/it, [0;92mdata_loading=0.021, iteration=1.177, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 30% 180/601 [04:56<09:25,  1.34s/it, [0;92mdata_loading=0.021, iteration=1.177, train_acc=61.47, train_loss_cross_entropy=1.341, train_loss_seg=1.341, train_macc=17.79, train_miou=12.48[0m)] 30% 180/601 [04:57<09:25,  1.34s/it, [0;92mdata_loading=0.000, iteration=1.627, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 30% 181/601 [04:57<10:00,  1.43s/it, [0;92mdata_loading=0.000, iteration=1.627, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 30% 181/601 [04:59<10:00,  1.43s/it, [0;92mdata_loading=0.008, iteration=1.587, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 30% 182/601 [04:59<10:19,  1.48s/it, [0;92mdata_loading=0.008, iteration=1.587, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 30% 182/601 [05:00<10:19,  1.48s/it, [0;92mdata_loading=0.014, iteration=1.234, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 30% 183/601 [05:00<09:49,  1.41s/it, [0;92mdata_loading=0.014, iteration=1.234, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 30% 183/601 [05:02<09:49,  1.41s/it, [0;92mdata_loading=0.011, iteration=1.544, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 184/601 [05:02<10:06,  1.45s/it, [0;92mdata_loading=0.011, iteration=1.544, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 184/601 [05:03<10:06,  1.45s/it, [0;92mdata_loading=0.024, iteration=1.463, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 185/601 [05:03<10:09,  1.46s/it, [0;92mdata_loading=0.024, iteration=1.463, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 185/601 [05:04<10:09,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.174, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 186/601 [05:04<09:31,  1.38s/it, [0;92mdata_loading=0.000, iteration=1.174, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 186/601 [05:06<09:31,  1.38s/it, [0;92mdata_loading=0.010, iteration=1.498, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 187/601 [05:06<09:46,  1.42s/it, [0;92mdata_loading=0.010, iteration=1.498, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 187/601 [05:08<09:46,  1.42s/it, [0;92mdata_loading=0.073, iteration=1.599, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 188/601 [05:08<10:16,  1.49s/it, [0;92mdata_loading=0.073, iteration=1.599, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 188/601 [05:09<10:16,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.498, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 189/601 [05:09<10:16,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.498, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 31% 189/601 [05:11<10:16,  1.50s/it, [0;92mdata_loading=0.011, iteration=1.638, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 32% 190/601 [05:11<10:33,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.638, train_acc=61.59, train_loss_cross_entropy=1.338, train_loss_seg=1.338, train_macc=18.43, train_miou=13.02[0m)] 32% 190/601 [05:12<10:33,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.660, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 191/601 [05:12<10:46,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.660, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 191/601 [05:14<10:46,  1.58s/it, [0;92mdata_loading=0.011, iteration=1.649, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 192/601 [05:14<10:55,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.649, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 192/601 [05:16<10:55,  1.60s/it, [0;92mdata_loading=0.027, iteration=1.731, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 193/601 [05:16<11:12,  1.65s/it, [0;92mdata_loading=0.027, iteration=1.731, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 193/601 [05:18<11:12,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.632, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 194/601 [05:18<11:09,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.632, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 194/601 [05:19<11:09,  1.64s/it, [0;92mdata_loading=0.016, iteration=1.294, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 195/601 [05:19<10:27,  1.54s/it, [0;92mdata_loading=0.016, iteration=1.294, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 32% 195/601 [05:20<10:27,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.521, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 196/601 [05:20<10:24,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.521, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 196/601 [05:22<10:24,  1.54s/it, [0;92mdata_loading=0.012, iteration=1.636, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 197/601 [05:22<10:35,  1.57s/it, [0;92mdata_loading=0.012, iteration=1.636, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 197/601 [05:24<10:35,  1.57s/it, [0;92mdata_loading=0.019, iteration=1.677, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 198/601 [05:24<10:49,  1.61s/it, [0;92mdata_loading=0.019, iteration=1.677, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 198/601 [05:25<10:49,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.218, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 199/601 [05:25<10:00,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.218, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 199/601 [05:26<10:00,  1.49s/it, [0;92mdata_loading=0.009, iteration=1.394, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 200/601 [05:26<09:48,  1.47s/it, [0;92mdata_loading=0.009, iteration=1.394, train_acc=61.70, train_loss_cross_entropy=1.327, train_loss_seg=1.327, train_macc=18.66, train_miou=13.21[0m)] 33% 200/601 [05:28<09:48,  1.47s/it, [0;92mdata_loading=0.02 , iteration=1.782, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 33% 201/601 [05:28<10:26,  1.57s/it, [0;92mdata_loading=0.02 , iteration=1.782, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 33% 201/601 [05:30<10:26,  1.57s/it, [0;92mdata_loading=0.074, iteration=2.154, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 202/601 [05:30<11:44,  1.77s/it, [0;92mdata_loading=0.074, iteration=2.154, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 202/601 [05:32<11:44,  1.77s/it, [0;92mdata_loading=0.000, iteration=1.848, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 203/601 [05:32<11:52,  1.79s/it, [0;92mdata_loading=0.000, iteration=1.848, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 203/601 [05:34<11:52,  1.79s/it, [0;92mdata_loading=0.000, iteration=1.500, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 204/601 [05:34<11:16,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.500, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 204/601 [05:35<11:16,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.289, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 205/601 [05:35<10:25,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.289, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 205/601 [05:37<10:25,  1.58s/it, [0;92mdata_loading=0.008, iteration=1.533, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 206/601 [05:37<10:19,  1.57s/it, [0;92mdata_loading=0.008, iteration=1.533, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 206/601 [05:38<10:19,  1.57s/it, [0;92mdata_loading=0.085, iteration=1.681, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 207/601 [05:38<10:41,  1.63s/it, [0;92mdata_loading=0.085, iteration=1.681, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 34% 207/601 [05:40<10:41,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.382, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 35% 208/601 [05:40<10:11,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.382, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 35% 208/601 [05:41<10:11,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.602, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 35% 209/601 [05:41<10:15,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.602, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 35% 209/601 [05:42<10:15,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.164, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 35% 210/601 [05:42<09:26,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.164, train_acc=61.50, train_loss_cross_entropy=1.331, train_loss_seg=1.331, train_macc=18.77, train_miou=13.18[0m)] 35% 210/601 [05:44<09:26,  1.45s/it, [0;92mdata_loading=0.013, iteration=1.409, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 35% 211/601 [05:44<09:21,  1.44s/it, [0;92mdata_loading=0.013, iteration=1.409, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 35% 211/601 [05:45<09:21,  1.44s/it, [0;92mdata_loading=0.020, iteration=1.312, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 35% 212/601 [05:45<09:07,  1.41s/it, [0;92mdata_loading=0.020, iteration=1.312, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 35% 212/601 [05:47<09:07,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.594, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 35% 213/601 [05:47<09:28,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.594, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 35% 213/601 [05:49<09:28,  1.46s/it, [0;92mdata_loading=0.020, iteration=1.696, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 214/601 [05:49<09:56,  1.54s/it, [0;92mdata_loading=0.020, iteration=1.696, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 214/601 [05:50<09:56,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.659, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 215/601 [05:50<10:08,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.659, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 215/601 [05:52<10:08,  1.58s/it, [0;92mdata_loading=0.076, iteration=2.023, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 216/601 [05:52<11:07,  1.73s/it, [0;92mdata_loading=0.076, iteration=2.023, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 216/601 [05:54<11:07,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.487, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 217/601 [05:54<10:37,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.487, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 217/601 [05:55<10:37,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.435, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 218/601 [05:55<10:10,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.435, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 218/601 [05:57<10:10,  1.59s/it, [0;92mdata_loading=0.086, iteration=2.039, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 219/601 [05:57<11:09,  1.75s/it, [0;92mdata_loading=0.086, iteration=2.039, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 36% 219/601 [05:59<11:09,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.535, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 37% 220/601 [05:59<10:43,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.535, train_acc=61.81, train_loss_cross_entropy=1.322, train_loss_seg=1.322, train_macc=19.20, train_miou=13.55[0m)] 37% 220/601 [06:01<10:43,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.741, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 221/601 [06:01<10:47,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.741, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 221/601 [06:02<10:47,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.265, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 222/601 [06:02<09:56,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.265, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 222/601 [06:04<09:56,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.834, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 223/601 [06:04<10:24,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.834, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 223/601 [06:06<10:24,  1.65s/it, [0;92mdata_loading=0.077, iteration=1.951, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 224/601 [06:06<11:05,  1.76s/it, [0;92mdata_loading=0.077, iteration=1.951, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 224/601 [06:07<11:05,  1.76s/it, [0;92mdata_loading=0.000, iteration=1.658, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 225/601 [06:07<10:51,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.658, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 37% 225/601 [06:09<10:51,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.681, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 226/601 [06:09<10:44,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.681, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 226/601 [06:10<10:44,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.315, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 227/601 [06:10<09:57,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.315, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 227/601 [06:12<09:57,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.442, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 228/601 [06:12<09:38,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.442, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 228/601 [06:13<09:38,  1.55s/it, [0;92mdata_loading=0.063, iteration=1.279, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 229/601 [06:13<09:13,  1.49s/it, [0;92mdata_loading=0.063, iteration=1.279, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 229/601 [06:15<09:13,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.451, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 230/601 [06:15<09:08,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.451, train_acc=62.43, train_loss_cross_entropy=1.303, train_loss_seg=1.303, train_macc=19.72, train_miou=13.92[0m)] 38% 230/601 [06:16<09:08,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.441, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 38% 231/601 [06:16<09:02,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.441, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 38% 231/601 [06:18<09:02,  1.47s/it, [0;92mdata_loading=0.025, iteration=1.662, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 232/601 [06:18<09:25,  1.53s/it, [0;92mdata_loading=0.025, iteration=1.662, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 232/601 [06:19<09:25,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.576, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 233/601 [06:19<09:29,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.576, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 233/601 [06:21<09:29,  1.55s/it, [0;92mdata_loading=0.074, iteration=1.443, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 234/601 [06:21<09:24,  1.54s/it, [0;92mdata_loading=0.074, iteration=1.443, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 234/601 [06:22<09:24,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.393, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 235/601 [06:22<09:07,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.393, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 235/601 [06:24<09:07,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.483, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 236/601 [06:24<09:04,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.483, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 236/601 [06:26<09:04,  1.49s/it, [0;92mdata_loading=0.021, iteration=1.741, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 237/601 [06:26<09:32,  1.57s/it, [0;92mdata_loading=0.021, iteration=1.741, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 39% 237/601 [06:27<09:32,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.341, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 40% 238/601 [06:27<09:05,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.341, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 40% 238/601 [06:29<09:05,  1.50s/it, [0;92mdata_loading=0.067, iteration=1.646, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 40% 239/601 [06:29<09:27,  1.57s/it, [0;92mdata_loading=0.067, iteration=1.646, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 40% 239/601 [06:30<09:27,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.710, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 40% 240/601 [06:30<09:41,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.710, train_acc=62.88, train_loss_cross_entropy=1.281, train_loss_seg=1.281, train_macc=19.96, train_miou=14.13[0m)] 40% 240/601 [06:32<09:41,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.652, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 40% 241/601 [06:32<09:44,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.652, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 40% 241/601 [06:34<09:44,  1.62s/it, [0;92mdata_loading=0.012, iteration=1.801, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 40% 242/601 [06:34<10:03,  1.68s/it, [0;92mdata_loading=0.012, iteration=1.801, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 40% 242/601 [06:35<10:03,  1.68s/it, [0;92mdata_loading=0.015, iteration=1.670, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 40% 243/601 [06:35<10:02,  1.68s/it, [0;92mdata_loading=0.015, iteration=1.670, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 40% 243/601 [06:37<10:02,  1.68s/it, [0;92mdata_loading=0.069, iteration=1.201, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 244/601 [06:37<09:16,  1.56s/it, [0;92mdata_loading=0.069, iteration=1.201, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 244/601 [06:38<09:16,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.273, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 245/601 [06:38<08:44,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.273, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 245/601 [06:39<08:44,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.468, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 246/601 [06:39<08:42,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.468, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 246/601 [06:41<08:42,  1.47s/it, [0;92mdata_loading=0.011, iteration=1.644, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 247/601 [06:41<09:00,  1.53s/it, [0;92mdata_loading=0.011, iteration=1.644, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 247/601 [06:43<09:00,  1.53s/it, [0;92mdata_loading=0.015, iteration=1.830, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 248/601 [06:43<09:32,  1.62s/it, [0;92mdata_loading=0.015, iteration=1.830, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 248/601 [06:45<09:32,  1.62s/it, [0;92mdata_loading=0.090, iteration=1.445, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 249/601 [06:45<09:22,  1.60s/it, [0;92mdata_loading=0.090, iteration=1.445, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 41% 249/601 [06:46<09:22,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.553, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 42% 250/601 [06:46<09:16,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.553, train_acc=63.26, train_loss_cross_entropy=1.269, train_loss_seg=1.269, train_macc=20.72, train_miou=14.70[0m)] 42% 250/601 [06:48<09:16,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.850, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 251/601 [06:48<09:42,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.850, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 251/601 [06:49<09:42,  1.66s/it, [0;92mdata_loading=0.012, iteration=1.533, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 252/601 [06:49<09:28,  1.63s/it, [0;92mdata_loading=0.012, iteration=1.533, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 252/601 [06:51<09:28,  1.63s/it, [0;92mdata_loading=0.008, iteration=1.851, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 253/601 [06:51<09:50,  1.70s/it, [0;92mdata_loading=0.008, iteration=1.851, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 253/601 [06:53<09:50,  1.70s/it, [0;92mdata_loading=0.098, iteration=1.812, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 254/601 [06:53<10:11,  1.76s/it, [0;92mdata_loading=0.098, iteration=1.812, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 254/601 [06:55<10:11,  1.76s/it, [0;92mdata_loading=0.000, iteration=1.780, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 255/601 [06:55<10:11,  1.77s/it, [0;92mdata_loading=0.000, iteration=1.780, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 42% 255/601 [06:57<10:11,  1.77s/it, [0;92mdata_loading=0.000, iteration=1.521, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 256/601 [06:57<09:44,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.521, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 256/601 [06:59<09:44,  1.69s/it, [0;92mdata_loading=0.010, iteration=2.044, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 257/601 [06:59<10:20,  1.80s/it, [0;92mdata_loading=0.010, iteration=2.044, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 257/601 [06:59<10:20,  1.80s/it, [0;92mdata_loading=0.000, iteration=0.871, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 258/601 [06:59<08:42,  1.52s/it, [0;92mdata_loading=0.000, iteration=0.871, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 258/601 [07:01<08:42,  1.52s/it, [0;92mdata_loading=0.083, iteration=1.763, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 259/601 [07:01<09:14,  1.62s/it, [0;92mdata_loading=0.083, iteration=1.763, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 259/601 [07:03<09:14,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.585, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 260/601 [07:03<09:09,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.585, train_acc=63.93, train_loss_cross_entropy=1.247, train_loss_seg=1.247, train_macc=20.94, train_miou=14.90[0m)] 43% 260/601 [07:05<09:09,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.607, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 43% 261/601 [07:05<09:07,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.607, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 43% 261/601 [07:06<09:07,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.612, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 262/601 [07:06<09:07,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.612, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 262/601 [07:08<09:07,  1.61s/it, [0;92mdata_loading=0.008, iteration=1.555, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 263/601 [07:08<09:00,  1.60s/it, [0;92mdata_loading=0.008, iteration=1.555, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 263/601 [07:09<09:00,  1.60s/it, [0;92mdata_loading=0.02 , iteration=1.568, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 264/601 [07:09<08:57,  1.60s/it, [0;92mdata_loading=0.02 , iteration=1.568, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 264/601 [07:11<08:57,  1.60s/it, [0;92mdata_loading=0.023, iteration=1.683, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 265/601 [07:11<09:07,  1.63s/it, [0;92mdata_loading=0.023, iteration=1.683, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 265/601 [07:13<09:07,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.612, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 266/601 [07:13<09:04,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.612, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 266/601 [07:14<09:04,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.285, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 267/601 [07:14<08:28,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.285, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 44% 267/601 [07:15<08:28,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.105, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 45% 268/601 [07:15<07:45,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.105, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 45% 268/601 [07:16<07:45,  1.40s/it, [0;92mdata_loading=0.017, iteration=1.310, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 45% 269/601 [07:16<07:37,  1.38s/it, [0;92mdata_loading=0.017, iteration=1.310, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 45% 269/601 [07:18<07:37,  1.38s/it, [0;92mdata_loading=0.100, iteration=1.901, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 45% 270/601 [07:18<08:37,  1.56s/it, [0;92mdata_loading=0.100, iteration=1.901, train_acc=63.92, train_loss_cross_entropy=1.252, train_loss_seg=1.252, train_macc=20.72, train_miou=14.77[0m)] 45% 270/601 [07:20<08:37,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.313, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 45% 271/601 [07:20<08:11,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.313, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 45% 271/601 [07:21<08:11,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.189, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 45% 272/601 [07:21<07:40,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.189, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 45% 272/601 [07:22<07:40,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.397, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 45% 273/601 [07:22<07:38,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.397, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 45% 273/601 [07:24<07:38,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.510, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 274/601 [07:24<07:48,  1.43s/it, [0;92mdata_loading=0.000, iteration=1.510, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 274/601 [07:26<07:48,  1.43s/it, [0;92mdata_loading=0.087, iteration=1.736, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 275/601 [07:26<08:25,  1.55s/it, [0;92mdata_loading=0.087, iteration=1.736, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 275/601 [07:27<08:25,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.067, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 276/601 [07:27<07:36,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.067, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 276/601 [07:28<07:36,  1.41s/it, [0;92mdata_loading=0.020, iteration=1.726, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 277/601 [07:28<08:08,  1.51s/it, [0;92mdata_loading=0.020, iteration=1.726, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 277/601 [07:30<08:08,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.386, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 278/601 [07:30<07:55,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.386, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 278/601 [07:31<07:55,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.523, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 279/601 [07:31<07:59,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.523, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 46% 279/601 [07:33<07:59,  1.49s/it, [0;92mdata_loading=0.079, iteration=1.756, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 47% 280/601 [07:33<08:31,  1.59s/it, [0;92mdata_loading=0.079, iteration=1.756, train_acc=64.25, train_loss_cross_entropy=1.239, train_loss_seg=1.239, train_macc=20.67, train_miou=14.79[0m)] 47% 280/601 [07:35<08:31,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.668, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 281/601 [07:35<08:36,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.668, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 281/601 [07:36<08:36,  1.62s/it, [0;92mdata_loading=0.009, iteration=1.529, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 282/601 [07:36<08:28,  1.59s/it, [0;92mdata_loading=0.009, iteration=1.529, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 282/601 [07:38<08:28,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.442, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 283/601 [07:38<08:12,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.442, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 283/601 [07:39<08:12,  1.55s/it, [0;92mdata_loading=0.008, iteration=1.610, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 284/601 [07:39<08:17,  1.57s/it, [0;92mdata_loading=0.008, iteration=1.610, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 284/601 [07:41<08:17,  1.57s/it, [0;92mdata_loading=0.086, iteration=1.495, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 285/601 [07:41<08:17,  1.57s/it, [0;92mdata_loading=0.086, iteration=1.495, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 47% 285/601 [07:42<08:17,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.398, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 286/601 [07:42<07:59,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.398, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 286/601 [07:44<07:59,  1.52s/it, [0;92mdata_loading=0.020, iteration=1.948, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 287/601 [07:44<08:39,  1.66s/it, [0;92mdata_loading=0.020, iteration=1.948, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 287/601 [07:46<08:39,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.403, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 288/601 [07:46<08:14,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.403, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 288/601 [07:47<08:14,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.535, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 289/601 [07:47<08:08,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.535, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 289/601 [07:49<08:08,  1.57s/it, [0;92mdata_loading=0.078, iteration=1.536, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 290/601 [07:49<08:11,  1.58s/it, [0;92mdata_loading=0.078, iteration=1.536, train_acc=63.84, train_loss_cross_entropy=1.253, train_loss_seg=1.253, train_macc=20.63, train_miou=14.73[0m)] 48% 290/601 [07:50<08:11,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.110, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 48% 291/601 [07:50<07:26,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.110, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 48% 291/601 [07:51<07:26,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.404, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 292/601 [07:51<07:22,  1.43s/it, [0;92mdata_loading=0.011, iteration=1.404, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 292/601 [07:53<07:22,  1.43s/it, [0;92mdata_loading=0.000, iteration=1.290, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 293/601 [07:53<07:08,  1.39s/it, [0;92mdata_loading=0.000, iteration=1.290, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 293/601 [07:54<07:08,  1.39s/it, [0;92mdata_loading=0.015, iteration=1.597, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 294/601 [07:54<07:27,  1.46s/it, [0;92mdata_loading=0.015, iteration=1.597, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 294/601 [07:55<07:27,  1.46s/it, [0;92mdata_loading=0.023, iteration=0.990, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 295/601 [07:55<06:45,  1.32s/it, [0;92mdata_loading=0.023, iteration=0.990, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 295/601 [07:57<06:45,  1.32s/it, [0;92mdata_loading=0.000, iteration=1.707, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 296/601 [07:57<07:19,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.707, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 296/601 [07:58<07:19,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.351, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 297/601 [07:58<07:10,  1.42s/it, [0;92mdata_loading=0.010, iteration=1.351, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 49% 297/601 [08:00<07:10,  1.42s/it, [0;92mdata_loading=0.009, iteration=1.574, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 50% 298/601 [08:00<07:24,  1.47s/it, [0;92mdata_loading=0.009, iteration=1.574, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 50% 298/601 [08:02<07:24,  1.47s/it, [0;92mdata_loading=0.008, iteration=1.683, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 50% 299/601 [08:02<07:43,  1.53s/it, [0;92mdata_loading=0.008, iteration=1.683, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 50% 299/601 [08:03<07:43,  1.53s/it, [0;92mdata_loading=0.019, iteration=1.393, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 50% 300/601 [08:03<07:30,  1.50s/it, [0;92mdata_loading=0.019, iteration=1.393, train_acc=64.05, train_loss_cross_entropy=1.241, train_loss_seg=1.241, train_macc=20.67, train_miou=14.76[0m)] 50% 300/601 [08:05<07:30,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.477, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 50% 301/601 [08:05<07:27,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.477, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 50% 301/601 [08:06<07:27,  1.49s/it, [0;92mdata_loading=0.011, iteration=1.788, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 50% 302/601 [08:06<07:53,  1.58s/it, [0;92mdata_loading=0.011, iteration=1.788, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 50% 302/601 [08:08<07:53,  1.58s/it, [0;92mdata_loading=0.011, iteration=1.537, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 50% 303/601 [08:08<07:49,  1.57s/it, [0;92mdata_loading=0.011, iteration=1.537, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 50% 303/601 [08:10<07:49,  1.57s/it, [0;92mdata_loading=0.011, iteration=1.845, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 304/601 [08:10<08:12,  1.66s/it, [0;92mdata_loading=0.011, iteration=1.845, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 304/601 [08:11<08:12,  1.66s/it, [0;92mdata_loading=0.022, iteration=1.367, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 305/601 [08:11<07:47,  1.58s/it, [0;92mdata_loading=0.022, iteration=1.367, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 305/601 [08:12<07:47,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.198, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 306/601 [08:12<07:12,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.198, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 306/601 [08:14<07:12,  1.46s/it, [0;92mdata_loading=0.010, iteration=1.375, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 307/601 [08:14<07:03,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.375, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 307/601 [08:15<07:03,  1.44s/it, [0;92mdata_loading=0.009, iteration=1.367, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 308/601 [08:15<06:56,  1.42s/it, [0;92mdata_loading=0.009, iteration=1.367, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 308/601 [08:16<06:56,  1.42s/it, [0;92mdata_loading=0.011, iteration=1.335, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 309/601 [08:16<06:48,  1.40s/it, [0;92mdata_loading=0.011, iteration=1.335, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 51% 309/601 [08:18<06:48,  1.40s/it, [0;92mdata_loading=0.021, iteration=1.183, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 52% 310/601 [08:18<06:30,  1.34s/it, [0;92mdata_loading=0.021, iteration=1.183, train_acc=64.52, train_loss_cross_entropy=1.223, train_loss_seg=1.223, train_macc=20.99, train_miou=15.01[0m)] 52% 310/601 [08:19<06:30,  1.34s/it, [0;92mdata_loading=0.000, iteration=1.765, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 311/601 [08:19<07:05,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.765, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 311/601 [08:21<07:05,  1.47s/it, [0;92mdata_loading=0.011, iteration=1.228, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 312/601 [08:21<06:44,  1.40s/it, [0;92mdata_loading=0.011, iteration=1.228, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 312/601 [08:22<06:44,  1.40s/it, [0;92mdata_loading=0.011, iteration=1.742, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 313/601 [08:22<07:13,  1.51s/it, [0;92mdata_loading=0.011, iteration=1.742, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 313/601 [08:24<07:13,  1.51s/it, [0;92mdata_loading=0.016, iteration=1.735, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 314/601 [08:24<07:33,  1.58s/it, [0;92mdata_loading=0.016, iteration=1.735, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 314/601 [08:26<07:33,  1.58s/it, [0;92mdata_loading=0.022, iteration=1.460, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 315/601 [08:26<07:23,  1.55s/it, [0;92mdata_loading=0.022, iteration=1.460, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 52% 315/601 [08:28<07:23,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.969, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 316/601 [08:28<07:57,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.969, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 316/601 [08:29<07:57,  1.68s/it, [0;92mdata_loading=0.104, iteration=1.665, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 317/601 [08:29<08:04,  1.70s/it, [0;92mdata_loading=0.104, iteration=1.665, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 317/601 [08:31<08:04,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.363, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 318/601 [08:31<07:33,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.363, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 318/601 [08:32<07:33,  1.60s/it, [0;92mdata_loading=0.000, iteration=0.878, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 319/601 [08:32<06:30,  1.39s/it, [0;92mdata_loading=0.000, iteration=0.878, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 319/601 [08:33<06:30,  1.39s/it, [0;92mdata_loading=0.000, iteration=1.420, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 320/601 [08:33<06:32,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.420, train_acc=64.61, train_loss_cross_entropy=1.220, train_loss_seg=1.220, train_macc=21.01, train_miou=15.08[0m)] 53% 320/601 [08:35<06:32,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.568, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 53% 321/601 [08:35<06:45,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.568, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 53% 321/601 [08:36<06:45,  1.45s/it, [0;92mdata_loading=0.083, iteration=1.674, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 322/601 [08:36<07:09,  1.54s/it, [0;92mdata_loading=0.083, iteration=1.674, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 322/601 [08:38<07:09,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.492, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 323/601 [08:38<07:04,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.492, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 323/601 [08:40<07:04,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.590, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 324/601 [08:40<07:08,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.590, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 324/601 [08:40<07:08,  1.55s/it, [0;92mdata_loading=0.000, iteration=0.820, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 325/601 [08:40<06:06,  1.33s/it, [0;92mdata_loading=0.000, iteration=0.820, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 325/601 [08:42<06:06,  1.33s/it, [0;92mdata_loading=0.000, iteration=1.262, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 326/601 [08:42<05:59,  1.31s/it, [0;92mdata_loading=0.000, iteration=1.262, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 326/601 [08:43<05:59,  1.31s/it, [0;92mdata_loading=0.094, iteration=1.357, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 327/601 [08:43<06:10,  1.35s/it, [0;92mdata_loading=0.094, iteration=1.357, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 54% 327/601 [08:45<06:10,  1.35s/it, [0;92mdata_loading=0.000, iteration=1.549, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 55% 328/601 [08:45<06:25,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.549, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 55% 328/601 [08:46<06:25,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.372, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 55% 329/601 [08:46<06:20,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.372, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 55% 329/601 [08:47<06:20,  1.40s/it, [0;92mdata_loading=0.001, iteration=1.483, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 55% 330/601 [08:47<06:26,  1.43s/it, [0;92mdata_loading=0.001, iteration=1.483, train_acc=64.60, train_loss_cross_entropy=1.221, train_loss_seg=1.221, train_macc=21.44, train_miou=15.41[0m)] 55% 330/601 [08:49<06:26,  1.43s/it, [0;92mdata_loading=0.011, iteration=1.455, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 55% 331/601 [08:49<06:28,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.455, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 55% 331/601 [08:51<06:28,  1.44s/it, [0;92mdata_loading=0.089, iteration=1.690, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 55% 332/601 [08:51<06:54,  1.54s/it, [0;92mdata_loading=0.089, iteration=1.690, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 55% 332/601 [08:53<06:54,  1.54s/it, [0;92mdata_loading=0.021, iteration=1.957, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 55% 333/601 [08:53<07:28,  1.67s/it, [0;92mdata_loading=0.021, iteration=1.957, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 55% 333/601 [08:54<07:28,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.455, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 334/601 [08:54<07:09,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.455, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 334/601 [08:56<07:09,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.381, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 335/601 [08:56<06:49,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.381, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 335/601 [08:57<06:49,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.413, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 336/601 [08:57<06:38,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.413, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 336/601 [08:58<06:38,  1.50s/it, [0;92mdata_loading=0.022, iteration=1.474, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 337/601 [08:58<06:36,  1.50s/it, [0;92mdata_loading=0.022, iteration=1.474, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 337/601 [09:00<06:36,  1.50s/it, [0;92mdata_loading=0.084, iteration=1.876, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 338/601 [09:00<07:11,  1.64s/it, [0;92mdata_loading=0.084, iteration=1.876, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 338/601 [09:02<07:11,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.455, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 339/601 [09:02<06:55,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.455, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 56% 339/601 [09:04<06:55,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.705, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 57% 340/601 [09:04<07:02,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.705, train_acc=64.88, train_loss_cross_entropy=1.210, train_loss_seg=1.210, train_macc=21.36, train_miou=15.42[0m)] 57% 340/601 [09:06<07:02,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.979, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 341/601 [09:06<07:30,  1.73s/it, [0;92mdata_loading=0.011, iteration=1.979, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 341/601 [09:07<07:30,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.488, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 342/601 [09:07<07:09,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.488, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 342/601 [09:09<07:09,  1.66s/it, [0;92mdata_loading=0.019, iteration=1.716, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 343/601 [09:09<07:14,  1.68s/it, [0;92mdata_loading=0.019, iteration=1.716, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 343/601 [09:11<07:14,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.790, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 344/601 [09:11<07:20,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.790, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 344/601 [09:12<07:20,  1.72s/it, [0;92mdata_loading=0.012, iteration=1.342, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 345/601 [09:12<06:51,  1.61s/it, [0;92mdata_loading=0.012, iteration=1.342, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 57% 345/601 [09:14<06:51,  1.61s/it, [0;92mdata_loading=0.090, iteration=1.974, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 346/601 [09:14<07:24,  1.74s/it, [0;92mdata_loading=0.090, iteration=1.974, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 346/601 [09:15<07:24,  1.74s/it, [0;92mdata_loading=0.010, iteration=1.427, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 347/601 [09:15<06:59,  1.65s/it, [0;92mdata_loading=0.010, iteration=1.427, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 347/601 [09:17<06:59,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.503, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 348/601 [09:17<06:46,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.503, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 348/601 [09:18<06:46,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.414, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 349/601 [09:18<06:30,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.414, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 349/601 [09:20<06:30,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.311, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 350/601 [09:20<06:11,  1.48s/it, [0;92mdata_loading=0.010, iteration=1.311, train_acc=65.46, train_loss_cross_entropy=1.198, train_loss_seg=1.198, train_macc=22.03, train_miou=15.96[0m)] 58% 350/601 [09:22<06:11,  1.48s/it, [0;92mdata_loading=0.020, iteration=1.887, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 58% 351/601 [09:22<06:42,  1.61s/it, [0;92mdata_loading=0.020, iteration=1.887, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 58% 351/601 [09:23<06:42,  1.61s/it, [0;92mdata_loading=0.012, iteration=1.675, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 352/601 [09:23<06:46,  1.63s/it, [0;92mdata_loading=0.012, iteration=1.675, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 352/601 [09:25<06:46,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.496, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 353/601 [09:25<06:34,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.496, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 353/601 [09:26<06:34,  1.59s/it, [0;92mdata_loading=0.011, iteration=1.689, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 354/601 [09:26<06:41,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.689, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 354/601 [09:29<06:41,  1.63s/it, [0;92mdata_loading=0.100, iteration=2.106, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 355/601 [09:29<07:22,  1.80s/it, [0;92mdata_loading=0.100, iteration=2.106, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 355/601 [09:31<07:22,  1.80s/it, [0;92mdata_loading=0.000, iteration=2.065, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 356/601 [09:31<07:40,  1.88s/it, [0;92mdata_loading=0.000, iteration=2.065, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 356/601 [09:33<07:40,  1.88s/it, [0;92mdata_loading=0.042, iteration=2.232, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 357/601 [09:33<08:07,  2.00s/it, [0;92mdata_loading=0.042, iteration=2.232, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 59% 357/601 [09:35<08:07,  2.00s/it, [0;92mdata_loading=0.000, iteration=1.696, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 60% 358/601 [09:35<07:43,  1.91s/it, [0;92mdata_loading=0.000, iteration=1.696, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 60% 358/601 [09:37<07:43,  1.91s/it, [0;92mdata_loading=0.000, iteration=1.816, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 60% 359/601 [09:37<07:35,  1.88s/it, [0;92mdata_loading=0.000, iteration=1.816, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 60% 359/601 [09:38<07:35,  1.88s/it, [0;92mdata_loading=0.000, iteration=1.754, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 60% 360/601 [09:38<07:24,  1.84s/it, [0;92mdata_loading=0.000, iteration=1.754, train_acc=65.13, train_loss_cross_entropy=1.205, train_loss_seg=1.205, train_macc=21.90, train_miou=15.80[0m)] 60% 360/601 [09:40<07:24,  1.84s/it, [0;92mdata_loading=0.000, iteration=1.389, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 60% 361/601 [09:40<06:49,  1.71s/it, [0;92mdata_loading=0.000, iteration=1.389, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 60% 361/601 [09:41<06:49,  1.71s/it, [0;92mdata_loading=0.022, iteration=1.740, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 60% 362/601 [09:41<06:52,  1.72s/it, [0;92mdata_loading=0.022, iteration=1.740, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 60% 362/601 [09:43<06:52,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.312, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 60% 363/601 [09:43<06:21,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.312, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 60% 363/601 [09:44<06:21,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.344, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 364/601 [09:44<06:01,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.344, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 364/601 [09:45<06:01,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.143, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 365/601 [09:45<05:32,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.143, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 365/601 [09:47<05:32,  1.41s/it, [0;92mdata_loading=0.018, iteration=1.922, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 366/601 [09:47<06:08,  1.57s/it, [0;92mdata_loading=0.018, iteration=1.922, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 366/601 [09:49<06:08,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.334, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 367/601 [09:49<05:50,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.334, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 367/601 [09:50<05:50,  1.50s/it, [0;92mdata_loading=0.027, iteration=1.490, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 368/601 [09:50<05:50,  1.51s/it, [0;92mdata_loading=0.027, iteration=1.490, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 368/601 [09:52<05:50,  1.51s/it, [0;92mdata_loading=0.010, iteration=1.650, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 369/601 [09:52<06:00,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.650, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 61% 369/601 [09:53<06:00,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.391, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 62% 370/601 [09:53<05:47,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.391, train_acc=65.24, train_loss_cross_entropy=1.195, train_loss_seg=1.195, train_macc=22.06, train_miou=15.95[0m)] 62% 370/601 [09:54<05:47,  1.50s/it, [0;92mdata_loading=0.011, iteration=1.338, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 371/601 [09:54<05:35,  1.46s/it, [0;92mdata_loading=0.011, iteration=1.338, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 371/601 [09:56<05:35,  1.46s/it, [0;92mdata_loading=0.011, iteration=1.383, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 372/601 [09:56<05:29,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.383, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 372/601 [09:57<05:29,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.443, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 373/601 [09:57<05:29,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.443, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 373/601 [09:59<05:29,  1.44s/it, [0;92mdata_loading=0.021, iteration=1.784, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 374/601 [09:59<05:52,  1.55s/it, [0;92mdata_loading=0.021, iteration=1.784, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 374/601 [10:01<05:52,  1.55s/it, [0;92mdata_loading=0.011, iteration=1.990, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 375/601 [10:01<06:21,  1.69s/it, [0;92mdata_loading=0.011, iteration=1.990, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 62% 375/601 [10:03<06:21,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.683, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 376/601 [10:03<06:19,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.683, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 376/601 [10:05<06:19,  1.69s/it, [0;92mdata_loading=0.008, iteration=2.043, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 377/601 [10:05<06:42,  1.80s/it, [0;92mdata_loading=0.008, iteration=2.043, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 377/601 [10:07<06:42,  1.80s/it, [0;92mdata_loading=0.019, iteration=1.824, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 378/601 [10:07<06:43,  1.81s/it, [0;92mdata_loading=0.019, iteration=1.824, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 378/601 [10:08<06:43,  1.81s/it, [0;92mdata_loading=0.085, iteration=1.598, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 379/601 [10:08<06:33,  1.77s/it, [0;92mdata_loading=0.085, iteration=1.598, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 379/601 [10:10<06:33,  1.77s/it, [0;92mdata_loading=0.000, iteration=1.982, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 380/601 [10:10<06:45,  1.84s/it, [0;92mdata_loading=0.000, iteration=1.982, train_acc=65.37, train_loss_cross_entropy=1.189, train_loss_seg=1.189, train_macc=22.26, train_miou=16.12[0m)] 63% 380/601 [10:12<06:45,  1.84s/it, [0;92mdata_loading=0.000, iteration=1.484, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 63% 381/601 [10:12<06:20,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.484, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 63% 381/601 [10:13<06:20,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.520, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 382/601 [10:13<06:05,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.520, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 382/601 [10:15<06:05,  1.67s/it, [0;92mdata_loading=0.022, iteration=2.008, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 383/601 [10:15<06:27,  1.78s/it, [0;92mdata_loading=0.022, iteration=2.008, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 383/601 [10:17<06:27,  1.78s/it, [0;92mdata_loading=0.021, iteration=1.908, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 384/601 [10:17<06:35,  1.82s/it, [0;92mdata_loading=0.021, iteration=1.908, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 384/601 [10:19<06:35,  1.82s/it, [0;92mdata_loading=0.000, iteration=1.510, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 385/601 [10:19<06:13,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.510, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 385/601 [10:20<06:13,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.242, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 386/601 [10:20<05:40,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.242, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 386/601 [10:22<05:40,  1.58s/it, [0;92mdata_loading=0.021, iteration=1.737, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 387/601 [10:22<05:50,  1.64s/it, [0;92mdata_loading=0.021, iteration=1.737, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 64% 387/601 [10:23<05:50,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.630, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 65% 388/601 [10:23<05:48,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.630, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 65% 388/601 [10:25<05:48,  1.63s/it, [0;92mdata_loading=0.085, iteration=1.696, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 65% 389/601 [10:25<05:55,  1.68s/it, [0;92mdata_loading=0.085, iteration=1.696, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 65% 389/601 [10:27<05:55,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.726, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 65% 390/601 [10:27<05:57,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.726, train_acc=65.50, train_loss_cross_entropy=1.182, train_loss_seg=1.182, train_macc=22.37, train_miou=16.17[0m)] 65% 390/601 [10:28<05:57,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.416, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 65% 391/601 [10:28<05:38,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.416, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 65% 391/601 [10:30<05:38,  1.61s/it, [0;92mdata_loading=0.012, iteration=1.577, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 65% 392/601 [10:30<05:35,  1.60s/it, [0;92mdata_loading=0.012, iteration=1.577, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 65% 392/601 [10:31<05:35,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.242, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 65% 393/601 [10:31<05:11,  1.50s/it, [0;92mdata_loading=0.010, iteration=1.242, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 65% 393/601 [10:33<05:11,  1.50s/it, [0;92mdata_loading=0.021, iteration=1.452, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 394/601 [10:33<05:08,  1.49s/it, [0;92mdata_loading=0.021, iteration=1.452, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 394/601 [10:34<05:08,  1.49s/it, [0;92mdata_loading=0.012, iteration=1.590, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 395/601 [10:34<05:14,  1.53s/it, [0;92mdata_loading=0.012, iteration=1.590, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 395/601 [10:36<05:14,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.478, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 396/601 [10:36<05:09,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.478, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 396/601 [10:38<05:09,  1.51s/it, [0;92mdata_loading=0.021, iteration=1.802, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 397/601 [10:38<05:27,  1.61s/it, [0;92mdata_loading=0.021, iteration=1.802, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 397/601 [10:39<05:27,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.320, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 398/601 [10:39<05:08,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.320, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 398/601 [10:41<05:08,  1.52s/it, [0;92mdata_loading=0.022, iteration=1.543, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 399/601 [10:41<05:09,  1.53s/it, [0;92mdata_loading=0.022, iteration=1.543, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 66% 399/601 [10:42<05:09,  1.53s/it, [0;92mdata_loading=0.011, iteration=1.475, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 67% 400/601 [10:42<05:05,  1.52s/it, [0;92mdata_loading=0.011, iteration=1.475, train_acc=65.67, train_loss_cross_entropy=1.178, train_loss_seg=1.178, train_macc=22.54, train_miou=16.35[0m)] 67% 400/601 [10:43<05:05,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.245, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 401/601 [10:43<04:47,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.245, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 401/601 [10:45<04:47,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.385, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 402/601 [10:45<04:43,  1.43s/it, [0;92mdata_loading=0.011, iteration=1.385, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 402/601 [10:46<04:43,  1.43s/it, [0;92mdata_loading=0.019, iteration=1.770, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 403/601 [10:46<05:03,  1.54s/it, [0;92mdata_loading=0.019, iteration=1.770, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 403/601 [10:48<05:03,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.665, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 404/601 [10:48<05:10,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.665, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 404/601 [10:50<05:10,  1.57s/it, [0;92mdata_loading=0.011, iteration=1.444, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 405/601 [10:50<05:01,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.444, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 67% 405/601 [10:51<05:01,  1.54s/it, [0;92mdata_loading=0.015, iteration=1.769, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 406/601 [10:51<05:14,  1.61s/it, [0;92mdata_loading=0.015, iteration=1.769, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 406/601 [10:53<05:14,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.932, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 407/601 [10:53<05:32,  1.71s/it, [0;92mdata_loading=0.010, iteration=1.932, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 407/601 [10:55<05:32,  1.71s/it, [0;92mdata_loading=0.020, iteration=1.403, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 408/601 [10:55<05:13,  1.63s/it, [0;92mdata_loading=0.020, iteration=1.403, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 408/601 [10:56<05:13,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.738, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 409/601 [10:56<05:18,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.738, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 409/601 [10:58<05:18,  1.66s/it, [0;92mdata_loading=0.010, iteration=1.625, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 410/601 [10:58<05:15,  1.65s/it, [0;92mdata_loading=0.010, iteration=1.625, train_acc=65.84, train_loss_cross_entropy=1.168, train_loss_seg=1.168, train_macc=22.66, train_miou=16.46[0m)] 68% 410/601 [11:00<05:15,  1.65s/it, [0;92mdata_loading=0.019, iteration=1.559, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 68% 411/601 [11:00<05:09,  1.63s/it, [0;92mdata_loading=0.019, iteration=1.559, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 68% 411/601 [11:02<05:09,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.970, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 412/601 [11:02<05:28,  1.74s/it, [0;92mdata_loading=0.011, iteration=1.970, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 412/601 [11:03<05:28,  1.74s/it, [0;92mdata_loading=0.029, iteration=1.698, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 413/601 [11:03<05:25,  1.73s/it, [0;92mdata_loading=0.029, iteration=1.698, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 413/601 [11:05<05:25,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.343, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 414/601 [11:05<05:02,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.343, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 414/601 [11:06<05:02,  1.62s/it, [0;92mdata_loading=0.009, iteration=1.609, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 415/601 [11:06<05:00,  1.62s/it, [0;92mdata_loading=0.009, iteration=1.609, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 415/601 [11:08<05:00,  1.62s/it, [0;92mdata_loading=0.010, iteration=1.659, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 416/601 [11:08<05:02,  1.63s/it, [0;92mdata_loading=0.010, iteration=1.659, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 416/601 [11:10<05:02,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.758, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 417/601 [11:10<05:08,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.758, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 69% 417/601 [11:11<05:08,  1.67s/it, [0;92mdata_loading=0.016, iteration=1.423, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 70% 418/601 [11:11<04:53,  1.60s/it, [0;92mdata_loading=0.016, iteration=1.423, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 70% 418/601 [11:13<04:53,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.564, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 70% 419/601 [11:13<04:49,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.564, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 70% 419/601 [11:15<04:49,  1.59s/it, [0;92mdata_loading=0.075, iteration=2.271, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 70% 420/601 [11:15<05:29,  1.82s/it, [0;92mdata_loading=0.075, iteration=2.271, train_acc=66.10, train_loss_cross_entropy=1.162, train_loss_seg=1.162, train_macc=22.94, train_miou=16.70[0m)] 70% 420/601 [11:17<05:29,  1.82s/it, [0;92mdata_loading=0.000, iteration=1.572, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 70% 421/601 [11:17<05:14,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.572, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 70% 421/601 [11:19<05:14,  1.75s/it, [0;92mdata_loading=0.020, iteration=1.856, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 70% 422/601 [11:19<05:19,  1.78s/it, [0;92mdata_loading=0.020, iteration=1.856, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 70% 422/601 [11:20<05:19,  1.78s/it, [0;92mdata_loading=0.000, iteration=1.445, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 70% 423/601 [11:20<04:59,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.445, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 70% 423/601 [11:22<04:59,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.908, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 424/601 [11:22<05:09,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.908, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 424/601 [11:23<05:09,  1.75s/it, [0;92mdata_loading=0.025, iteration=1.492, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 425/601 [11:23<04:55,  1.68s/it, [0;92mdata_loading=0.025, iteration=1.492, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 425/601 [11:25<04:55,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.388, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 426/601 [11:25<04:38,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.388, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 426/601 [11:26<04:38,  1.59s/it, [0;92mdata_loading=0.012, iteration=1.420, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 427/601 [11:26<04:28,  1.55s/it, [0;92mdata_loading=0.012, iteration=1.420, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 427/601 [11:28<04:28,  1.55s/it, [0;92mdata_loading=0.019, iteration=1.687, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 428/601 [11:28<04:35,  1.59s/it, [0;92mdata_loading=0.019, iteration=1.687, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 428/601 [11:30<04:35,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.539, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 429/601 [11:30<04:31,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.539, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 71% 429/601 [11:31<04:31,  1.58s/it, [0;92mdata_loading=0.019, iteration=1.436, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 72% 430/601 [11:31<04:23,  1.54s/it, [0;92mdata_loading=0.019, iteration=1.436, train_acc=66.17, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=22.97, train_miou=16.75[0m)] 72% 430/601 [11:32<04:23,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.232, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 431/601 [11:32<04:06,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.232, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 431/601 [11:34<04:06,  1.45s/it, [0;92mdata_loading=0.017, iteration=1.641, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 432/601 [11:34<04:15,  1.51s/it, [0;92mdata_loading=0.017, iteration=1.641, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 432/601 [11:36<04:15,  1.51s/it, [0;92mdata_loading=0.017, iteration=1.650, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 433/601 [11:36<04:21,  1.56s/it, [0;92mdata_loading=0.017, iteration=1.650, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 433/601 [11:37<04:21,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.719, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 434/601 [11:37<04:28,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.719, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 434/601 [11:39<04:28,  1.61s/it, [0;92mdata_loading=0.007, iteration=1.534, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 435/601 [11:39<04:23,  1.59s/it, [0;92mdata_loading=0.007, iteration=1.534, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 72% 435/601 [11:41<04:23,  1.59s/it, [0;92mdata_loading=0.011, iteration=1.706, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 436/601 [11:41<04:28,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.706, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 436/601 [11:42<04:28,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.582, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 437/601 [11:42<04:25,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.582, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 437/601 [11:44<04:25,  1.62s/it, [0;92mdata_loading=0.019, iteration=2.036, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 438/601 [11:44<04:45,  1.75s/it, [0;92mdata_loading=0.019, iteration=2.036, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 438/601 [11:46<04:45,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.554, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 439/601 [11:46<04:33,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.554, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 439/601 [11:48<04:33,  1.69s/it, [0;92mdata_loading=0.016, iteration=1.797, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 440/601 [11:48<04:38,  1.73s/it, [0;92mdata_loading=0.016, iteration=1.797, train_acc=66.30, train_loss_cross_entropy=1.153, train_loss_seg=1.153, train_macc=23.04, train_miou=16.81[0m)] 73% 440/601 [11:49<04:38,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.393, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 73% 441/601 [11:49<04:20,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.393, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 73% 441/601 [11:50<04:20,  1.63s/it, [0;92mdata_loading=0.010, iteration=1.504, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 442/601 [11:50<04:13,  1.59s/it, [0;92mdata_loading=0.010, iteration=1.504, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 442/601 [11:52<04:13,  1.59s/it, [0;92mdata_loading=0.021, iteration=1.658, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 443/601 [11:52<04:15,  1.62s/it, [0;92mdata_loading=0.021, iteration=1.658, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 443/601 [11:53<04:15,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.255, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 444/601 [11:53<03:57,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.255, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 444/601 [11:55<03:57,  1.51s/it, [0;92mdata_loading=0.012, iteration=1.359, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 445/601 [11:55<03:49,  1.47s/it, [0;92mdata_loading=0.012, iteration=1.359, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 445/601 [11:57<03:49,  1.47s/it, [0;92mdata_loading=0.011, iteration=1.747, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 446/601 [11:57<04:01,  1.56s/it, [0;92mdata_loading=0.011, iteration=1.747, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 446/601 [11:58<04:01,  1.56s/it, [0;92mdata_loading=0.010, iteration=1.633, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 447/601 [11:58<04:03,  1.58s/it, [0;92mdata_loading=0.010, iteration=1.633, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 74% 447/601 [12:00<04:03,  1.58s/it, [0;92mdata_loading=0.021, iteration=1.664, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 75% 448/601 [12:00<04:06,  1.61s/it, [0;92mdata_loading=0.021, iteration=1.664, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 75% 448/601 [12:01<04:06,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.537, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 75% 449/601 [12:01<04:01,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.537, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 75% 449/601 [12:03<04:01,  1.59s/it, [0;92mdata_loading=0.009, iteration=1.227, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 75% 450/601 [12:03<03:44,  1.49s/it, [0;92mdata_loading=0.009, iteration=1.227, train_acc=66.23, train_loss_cross_entropy=1.159, train_loss_seg=1.159, train_macc=23.35, train_miou=17.06[0m)] 75% 450/601 [12:04<03:44,  1.49s/it, [0;92mdata_loading=0.011, iteration=1.326, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 75% 451/601 [12:04<03:36,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.326, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 75% 451/601 [12:06<03:36,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.790, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 75% 452/601 [12:06<03:50,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.790, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 75% 452/601 [12:08<03:50,  1.55s/it, [0;92mdata_loading=0.019, iteration=1.760, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 75% 453/601 [12:08<03:59,  1.62s/it, [0;92mdata_loading=0.019, iteration=1.760, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 75% 453/601 [12:09<03:59,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.563, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 454/601 [12:09<03:55,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.563, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 454/601 [12:11<03:55,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.744, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 455/601 [12:11<04:00,  1.65s/it, [0;92mdata_loading=0.011, iteration=1.744, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 455/601 [12:13<04:00,  1.65s/it, [0;92mdata_loading=0.015, iteration=1.736, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 456/601 [12:13<04:03,  1.68s/it, [0;92mdata_loading=0.015, iteration=1.736, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 456/601 [12:15<04:03,  1.68s/it, [0;92mdata_loading=0.000, iteration=1.956, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 457/601 [12:15<04:13,  1.76s/it, [0;92mdata_loading=0.000, iteration=1.956, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 457/601 [12:16<04:13,  1.76s/it, [0;92mdata_loading=0.020, iteration=1.709, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 458/601 [12:16<04:10,  1.75s/it, [0;92mdata_loading=0.020, iteration=1.709, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 458/601 [12:18<04:10,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.648, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 459/601 [12:18<04:04,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.648, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 76% 459/601 [12:19<04:04,  1.72s/it, [0;92mdata_loading=0.008, iteration=1.277, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 77% 460/601 [12:19<03:44,  1.59s/it, [0;92mdata_loading=0.008, iteration=1.277, train_acc=66.33, train_loss_cross_entropy=1.158, train_loss_seg=1.158, train_macc=23.60, train_miou=17.26[0m)] 77% 460/601 [12:21<03:44,  1.59s/it, [0;92mdata_loading=0.019, iteration=1.634, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 461/601 [12:21<03:45,  1.61s/it, [0;92mdata_loading=0.019, iteration=1.634, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 461/601 [12:22<03:45,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.071, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 462/601 [12:22<03:21,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.071, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 462/601 [12:23<03:21,  1.45s/it, [0;92mdata_loading=0.020, iteration=1.451, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 463/601 [12:23<03:20,  1.46s/it, [0;92mdata_loading=0.020, iteration=1.451, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 463/601 [12:25<03:20,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.340, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 464/601 [12:25<03:14,  1.42s/it, [0;92mdata_loading=0.000, iteration=1.340, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 464/601 [12:26<03:14,  1.42s/it, [0;92mdata_loading=0.010, iteration=1.471, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 465/601 [12:26<03:15,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.471, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 77% 465/601 [12:27<03:15,  1.44s/it, [0;92mdata_loading=0.012, iteration=1.192, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 466/601 [12:27<03:04,  1.37s/it, [0;92mdata_loading=0.012, iteration=1.192, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 466/601 [12:29<03:04,  1.37s/it, [0;92mdata_loading=0.008, iteration=1.882, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 467/601 [12:29<03:24,  1.53s/it, [0;92mdata_loading=0.008, iteration=1.882, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 467/601 [12:31<03:24,  1.53s/it, [0;92mdata_loading=0.020, iteration=1.422, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 468/601 [12:31<03:19,  1.50s/it, [0;92mdata_loading=0.020, iteration=1.422, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 468/601 [12:32<03:19,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.352, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 469/601 [12:32<03:12,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.352, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 469/601 [12:34<03:12,  1.46s/it, [0;92mdata_loading=0.011, iteration=1.681, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 470/601 [12:34<03:20,  1.53s/it, [0;92mdata_loading=0.011, iteration=1.681, train_acc=66.67, train_loss_cross_entropy=1.147, train_loss_seg=1.147, train_macc=24.04, train_miou=17.57[0m)] 78% 470/601 [12:36<03:20,  1.53s/it, [0;92mdata_loading=0.015, iteration=1.767, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 78% 471/601 [12:36<03:28,  1.60s/it, [0;92mdata_loading=0.015, iteration=1.767, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 78% 471/601 [12:38<03:28,  1.60s/it, [0;92mdata_loading=0.096, iteration=2.007, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 472/601 [12:38<03:46,  1.75s/it, [0;92mdata_loading=0.096, iteration=2.007, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 472/601 [12:39<03:46,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.315, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 473/601 [12:39<03:27,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.315, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 473/601 [12:41<03:27,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.652, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 474/601 [12:41<03:27,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.652, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 474/601 [12:42<03:27,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.396, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 475/601 [12:42<03:16,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.396, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 475/601 [12:44<03:16,  1.56s/it, [0;92mdata_loading=0.096, iteration=1.619, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 476/601 [12:44<03:21,  1.61s/it, [0;92mdata_loading=0.096, iteration=1.619, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 476/601 [12:45<03:21,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.563, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 477/601 [12:45<03:17,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.563, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 79% 477/601 [12:46<03:17,  1.59s/it, [0;92mdata_loading=0.000, iteration=0.996, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 80% 478/601 [12:46<02:54,  1.42s/it, [0;92mdata_loading=0.000, iteration=0.996, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 80% 478/601 [12:48<02:54,  1.42s/it, [0;92mdata_loading=0.012, iteration=1.821, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 80% 479/601 [12:48<03:08,  1.54s/it, [0;92mdata_loading=0.012, iteration=1.821, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 80% 479/601 [12:50<03:08,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.536, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 80% 480/601 [12:50<03:06,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.536, train_acc=66.78, train_loss_cross_entropy=1.141, train_loss_seg=1.141, train_macc=24.09, train_miou=17.59[0m)] 80% 480/601 [12:52<03:06,  1.54s/it, [0;92mdata_loading=0.019, iteration=1.783, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 80% 481/601 [12:52<03:14,  1.62s/it, [0;92mdata_loading=0.019, iteration=1.783, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 80% 481/601 [12:54<03:14,  1.62s/it, [0;92mdata_loading=0.090, iteration=2.061, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 80% 482/601 [12:54<03:31,  1.78s/it, [0;92mdata_loading=0.090, iteration=2.061, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 80% 482/601 [12:55<03:31,  1.78s/it, [0;92mdata_loading=0.000, iteration=1.528, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 80% 483/601 [12:55<03:21,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.528, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 80% 483/601 [12:57<03:21,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.510, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 484/601 [12:57<03:12,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.510, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 484/601 [12:58<03:12,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.493, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 485/601 [12:58<03:05,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.493, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 485/601 [13:00<03:05,  1.60s/it, [0;92mdata_loading=0.074, iteration=1.752, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 486/601 [13:00<03:11,  1.67s/it, [0;92mdata_loading=0.074, iteration=1.752, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 486/601 [13:02<03:11,  1.67s/it, [0;92mdata_loading=0.010, iteration=1.669, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 487/601 [13:02<03:10,  1.67s/it, [0;92mdata_loading=0.010, iteration=1.669, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 487/601 [13:03<03:10,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.475, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 488/601 [13:03<03:02,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.475, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 488/601 [13:05<03:02,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.600, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 489/601 [13:05<03:00,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.600, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 81% 489/601 [13:07<03:00,  1.61s/it, [0;92mdata_loading=0.011, iteration=1.665, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 82% 490/601 [13:07<03:00,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.665, train_acc=66.79, train_loss_cross_entropy=1.140, train_loss_seg=1.140, train_macc=24.38, train_miou=17.84[0m)] 82% 490/601 [13:08<03:00,  1.63s/it, [0;92mdata_loading=0.021, iteration=1.272, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 491/601 [13:08<02:48,  1.53s/it, [0;92mdata_loading=0.021, iteration=1.272, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 491/601 [13:10<02:48,  1.53s/it, [0;92mdata_loading=0.016, iteration=1.763, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 492/601 [13:10<02:54,  1.60s/it, [0;92mdata_loading=0.016, iteration=1.763, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 492/601 [13:11<02:54,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.670, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 493/601 [13:11<02:55,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.670, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 493/601 [13:13<02:55,  1.62s/it, [0;92mdata_loading=0.010, iteration=1.566, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 494/601 [13:13<02:52,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.566, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 494/601 [13:14<02:52,  1.61s/it, [0;92mdata_loading=0.009, iteration=1.536, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 495/601 [13:14<02:48,  1.59s/it, [0;92mdata_loading=0.009, iteration=1.536, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 82% 495/601 [13:16<02:48,  1.59s/it, [0;92mdata_loading=0.020, iteration=1.571, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 496/601 [13:16<02:47,  1.59s/it, [0;92mdata_loading=0.020, iteration=1.571, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 496/601 [13:17<02:47,  1.59s/it, [0;92mdata_loading=0.009, iteration=1.328, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 497/601 [13:17<02:37,  1.52s/it, [0;92mdata_loading=0.009, iteration=1.328, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 497/601 [13:19<02:37,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.446, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 498/601 [13:19<02:33,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.446, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 498/601 [13:20<02:33,  1.49s/it, [0;92mdata_loading=0.011, iteration=1.500, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 499/601 [13:20<02:33,  1.50s/it, [0;92mdata_loading=0.011, iteration=1.500, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 499/601 [13:22<02:33,  1.50s/it, [0;92mdata_loading=0.012, iteration=1.498, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 500/601 [13:22<02:31,  1.50s/it, [0;92mdata_loading=0.012, iteration=1.498, train_acc=66.81, train_loss_cross_entropy=1.136, train_loss_seg=1.136, train_macc=24.74, train_miou=18.09[0m)] 83% 500/601 [13:24<02:31,  1.50s/it, [0;92mdata_loading=0.098, iteration=2.170, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 83% 501/601 [13:24<02:53,  1.73s/it, [0;92mdata_loading=0.098, iteration=2.170, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 83% 501/601 [13:25<02:53,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.196, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 502/601 [13:25<02:35,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.196, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 502/601 [13:27<02:35,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.430, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 503/601 [13:27<02:29,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.430, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 503/601 [13:28<02:29,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.233, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 504/601 [13:28<02:19,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.233, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 504/601 [13:30<02:19,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.721, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 505/601 [13:30<02:26,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.721, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 505/601 [13:31<02:26,  1.53s/it, [0;92mdata_loading=0.081, iteration=1.345, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 506/601 [13:31<02:22,  1.50s/it, [0;92mdata_loading=0.081, iteration=1.345, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 506/601 [13:33<02:22,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.467, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 507/601 [13:33<02:19,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.467, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 84% 507/601 [13:34<02:19,  1.49s/it, [0;92mdata_loading=0.010, iteration=1.881, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 85% 508/601 [13:34<02:29,  1.61s/it, [0;92mdata_loading=0.010, iteration=1.881, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 85% 508/601 [13:36<02:29,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.291, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 85% 509/601 [13:36<02:19,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.291, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 85% 509/601 [13:38<02:19,  1.51s/it, [0;92mdata_loading=0.093, iteration=1.745, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 85% 510/601 [13:38<02:26,  1.61s/it, [0;92mdata_loading=0.093, iteration=1.745, train_acc=67.20, train_loss_cross_entropy=1.129, train_loss_seg=1.129, train_macc=25.00, train_miou=18.35[0m)] 85% 510/601 [13:39<02:26,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.408, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 85% 511/601 [13:39<02:19,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.408, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 85% 511/601 [13:41<02:19,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.698, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 85% 512/601 [13:41<02:21,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.698, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 85% 512/601 [13:42<02:21,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.295, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 85% 513/601 [13:42<02:12,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.295, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 85% 513/601 [13:44<02:12,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.575, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 514/601 [13:44<02:12,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.575, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 514/601 [13:45<02:12,  1.53s/it, [0;92mdata_loading=0.023, iteration=1.151, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 515/601 [13:45<02:02,  1.42s/it, [0;92mdata_loading=0.023, iteration=1.151, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 515/601 [13:46<02:02,  1.42s/it, [0;92mdata_loading=0.000, iteration=1.403, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 516/601 [13:46<02:00,  1.42s/it, [0;92mdata_loading=0.000, iteration=1.403, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 516/601 [13:48<02:00,  1.42s/it, [0;92mdata_loading=0.010, iteration=1.925, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 517/601 [13:48<02:12,  1.57s/it, [0;92mdata_loading=0.010, iteration=1.925, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 517/601 [13:50<02:12,  1.57s/it, [0;92mdata_loading=0.093, iteration=1.534, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 518/601 [13:50<02:11,  1.59s/it, [0;92mdata_loading=0.093, iteration=1.534, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 518/601 [13:51<02:11,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.548, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 519/601 [13:51<02:09,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.548, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 86% 519/601 [13:53<02:09,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.441, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 87% 520/601 [13:53<02:04,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.441, train_acc=67.58, train_loss_cross_entropy=1.115, train_loss_seg=1.115, train_macc=25.09, train_miou=18.45[0m)] 87% 520/601 [13:54<02:04,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.305, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 521/601 [13:54<01:57,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.305, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 521/601 [13:56<01:57,  1.47s/it, [0;92mdata_loading=0.012, iteration=1.786, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 522/601 [13:56<02:03,  1.57s/it, [0;92mdata_loading=0.012, iteration=1.786, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 522/601 [13:58<02:03,  1.57s/it, [0;92mdata_loading=0.082, iteration=1.676, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 523/601 [13:58<02:06,  1.62s/it, [0;92mdata_loading=0.082, iteration=1.676, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 523/601 [13:59<02:06,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.835, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 524/601 [13:59<02:09,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.835, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 524/601 [14:01<02:09,  1.69s/it, [0;92mdata_loading=0.011, iteration=1.710, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 525/601 [14:01<02:09,  1.70s/it, [0;92mdata_loading=0.011, iteration=1.710, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 87% 525/601 [14:03<02:09,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.426, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 526/601 [14:03<02:01,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.426, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 526/601 [14:04<02:01,  1.62s/it, [0;92mdata_loading=0.010, iteration=1.518, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 527/601 [14:04<01:57,  1.59s/it, [0;92mdata_loading=0.010, iteration=1.518, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 527/601 [14:06<01:57,  1.59s/it, [0;92mdata_loading=0.029, iteration=1.518, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 528/601 [14:06<01:55,  1.58s/it, [0;92mdata_loading=0.029, iteration=1.518, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 528/601 [14:07<01:55,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.701, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 529/601 [14:07<01:56,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.701, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 529/601 [14:09<01:56,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.358, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 530/601 [14:09<01:49,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.358, train_acc=67.60, train_loss_cross_entropy=1.116, train_loss_seg=1.116, train_macc=25.20, train_miou=18.52[0m)] 88% 530/601 [14:10<01:49,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.433, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 88% 531/601 [14:10<01:45,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.433, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 88% 531/601 [14:12<01:45,  1.51s/it, [0;92mdata_loading=0.011, iteration=1.698, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 532/601 [14:12<01:48,  1.57s/it, [0;92mdata_loading=0.011, iteration=1.698, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 532/601 [14:14<01:48,  1.57s/it, [0;92mdata_loading=0.092, iteration=2.015, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 533/601 [14:14<01:57,  1.73s/it, [0;92mdata_loading=0.092, iteration=2.015, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 533/601 [14:16<01:57,  1.73s/it, [0;92mdata_loading=0.000, iteration=1.629, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 534/601 [14:16<01:53,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.629, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 534/601 [14:17<01:53,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.547, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 535/601 [14:17<01:49,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.547, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 535/601 [14:19<01:49,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.777, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 536/601 [14:19<01:49,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.777, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 536/601 [14:21<01:49,  1.69s/it, [0;92mdata_loading=0.019, iteration=1.960, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 537/601 [14:21<01:53,  1.78s/it, [0;92mdata_loading=0.019, iteration=1.960, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 89% 537/601 [14:23<01:53,  1.78s/it, [0;92mdata_loading=0.082, iteration=1.813, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 90% 538/601 [14:23<01:54,  1.81s/it, [0;92mdata_loading=0.082, iteration=1.813, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 90% 538/601 [14:24<01:54,  1.81s/it, [0;92mdata_loading=0.000, iteration=1.178, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 90% 539/601 [14:24<01:40,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.178, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 90% 539/601 [14:25<01:40,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.309, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 90% 540/601 [14:25<01:33,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.309, train_acc=67.78, train_loss_cross_entropy=1.111, train_loss_seg=1.111, train_macc=25.62, train_miou=18.88[0m)] 90% 540/601 [14:26<01:33,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.251, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 90% 541/601 [14:26<01:26,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.251, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 90% 541/601 [14:28<01:26,  1.45s/it, [0;92mdata_loading=0.011, iteration=1.695, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 90% 542/601 [14:28<01:29,  1.52s/it, [0;92mdata_loading=0.011, iteration=1.695, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 90% 542/601 [14:30<01:29,  1.52s/it, [0;92mdata_loading=0.071, iteration=1.323, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 90% 543/601 [14:30<01:26,  1.49s/it, [0;92mdata_loading=0.071, iteration=1.323, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 90% 543/601 [14:31<01:26,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.400, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 544/601 [14:31<01:23,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.400, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 544/601 [14:32<01:23,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.288, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 545/601 [14:32<01:18,  1.41s/it, [0;92mdata_loading=0.000, iteration=1.288, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 545/601 [14:34<01:18,  1.41s/it, [0;92mdata_loading=0.011, iteration=1.742, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 546/601 [14:34<01:23,  1.51s/it, [0;92mdata_loading=0.011, iteration=1.742, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 546/601 [14:36<01:23,  1.51s/it, [0;92mdata_loading=0.011, iteration=1.516, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 547/601 [14:36<01:21,  1.52s/it, [0;92mdata_loading=0.011, iteration=1.516, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 547/601 [14:37<01:21,  1.52s/it, [0;92mdata_loading=0.094, iteration=1.295, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 548/601 [14:37<01:18,  1.48s/it, [0;92mdata_loading=0.094, iteration=1.295, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 548/601 [14:39<01:18,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.810, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 549/601 [14:39<01:22,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.810, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 91% 549/601 [14:40<01:22,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.602, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 92% 550/601 [14:40<01:20,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.602, train_acc=67.73, train_loss_cross_entropy=1.114, train_loss_seg=1.114, train_macc=25.52, train_miou=18.82[0m)] 92% 550/601 [14:42<01:20,  1.59s/it, [0;92mdata_loading=0.008, iteration=1.907, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 551/601 [14:42<01:24,  1.69s/it, [0;92mdata_loading=0.008, iteration=1.907, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 551/601 [14:44<01:24,  1.69s/it, [0;92mdata_loading=0.011, iteration=1.614, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 552/601 [14:44<01:21,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.614, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 552/601 [14:46<01:21,  1.67s/it, [0;92mdata_loading=0.078, iteration=1.583, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 553/601 [14:46<01:19,  1.67s/it, [0;92mdata_loading=0.078, iteration=1.583, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 553/601 [14:47<01:19,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.899, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 554/601 [14:47<01:21,  1.74s/it, [0;92mdata_loading=0.000, iteration=1.899, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 554/601 [14:49<01:21,  1.74s/it, [0;92mdata_loading=0.000, iteration=1.355, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 555/601 [14:49<01:14,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.355, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 92% 555/601 [14:50<01:14,  1.62s/it, [0;92mdata_loading=0.009, iteration=1.502, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 556/601 [14:50<01:11,  1.59s/it, [0;92mdata_loading=0.009, iteration=1.502, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 556/601 [14:52<01:11,  1.59s/it, [0;92mdata_loading=0.015, iteration=1.608, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 557/601 [14:52<01:10,  1.60s/it, [0;92mdata_loading=0.015, iteration=1.608, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 557/601 [14:53<01:10,  1.60s/it, [0;92mdata_loading=0.023, iteration=1.418, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 558/601 [14:53<01:06,  1.55s/it, [0;92mdata_loading=0.023, iteration=1.418, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 558/601 [14:55<01:06,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.342, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 559/601 [14:55<01:02,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.342, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 559/601 [14:57<01:02,  1.49s/it, [0;92mdata_loading=0.011, iteration=1.847, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 560/601 [14:57<01:05,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.847, train_acc=68.09, train_loss_cross_entropy=1.106, train_loss_seg=1.106, train_macc=25.89, train_miou=19.11[0m)] 93% 560/601 [14:59<01:05,  1.60s/it, [0;92mdata_loading=0.011, iteration=2.186, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 93% 561/601 [14:59<01:11,  1.78s/it, [0;92mdata_loading=0.011, iteration=2.186, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 93% 561/601 [15:01<01:11,  1.78s/it, [0;92mdata_loading=0.025, iteration=2.005, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 562/601 [15:01<01:12,  1.86s/it, [0;92mdata_loading=0.025, iteration=2.005, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 562/601 [15:02<01:12,  1.86s/it, [0;92mdata_loading=0.012, iteration=1.332, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 563/601 [15:02<01:04,  1.70s/it, [0;92mdata_loading=0.012, iteration=1.332, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 563/601 [15:04<01:04,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.384, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 564/601 [15:04<00:59,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.384, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 564/601 [15:05<00:59,  1.61s/it, [0;92mdata_loading=0.017, iteration=1.332, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 565/601 [15:05<00:55,  1.53s/it, [0;92mdata_loading=0.017, iteration=1.332, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 565/601 [15:06<00:55,  1.53s/it, [0;92mdata_loading=0.013, iteration=1.514, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 566/601 [15:06<00:53,  1.53s/it, [0;92mdata_loading=0.013, iteration=1.514, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 566/601 [15:08<00:53,  1.53s/it, [0;92mdata_loading=0.011, iteration=1.374, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 567/601 [15:08<00:50,  1.49s/it, [0;92mdata_loading=0.011, iteration=1.374, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 94% 567/601 [15:09<00:50,  1.49s/it, [0;92mdata_loading=0.022, iteration=1.630, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 95% 568/601 [15:09<00:50,  1.54s/it, [0;92mdata_loading=0.022, iteration=1.630, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 95% 568/601 [15:11<00:50,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.483, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 95% 569/601 [15:11<00:48,  1.52s/it, [0;92mdata_loading=0.000, iteration=1.483, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 95% 569/601 [15:12<00:48,  1.52s/it, [0;92mdata_loading=0.010, iteration=1.439, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 95% 570/601 [15:12<00:46,  1.50s/it, [0;92mdata_loading=0.010, iteration=1.439, train_acc=68.50, train_loss_cross_entropy=1.098, train_loss_seg=1.098, train_macc=26.23, train_miou=19.42[0m)] 95% 570/601 [15:14<00:46,  1.50s/it, [0;92mdata_loading=0.010, iteration=1.631, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 95% 571/601 [15:14<00:46,  1.54s/it, [0;92mdata_loading=0.010, iteration=1.631, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 95% 571/601 [15:16<00:46,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.953, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 95% 572/601 [15:16<00:48,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.953, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 95% 572/601 [15:18<00:48,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.699, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 95% 573/601 [15:18<00:47,  1.68s/it, [0;92mdata_loading=0.011, iteration=1.699, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 95% 573/601 [15:20<00:47,  1.68s/it, [0;92mdata_loading=0.084, iteration=1.838, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 574/601 [15:20<00:47,  1.75s/it, [0;92mdata_loading=0.084, iteration=1.838, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 574/601 [15:21<00:47,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.612, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 575/601 [15:21<00:44,  1.71s/it, [0;92mdata_loading=0.000, iteration=1.612, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 575/601 [15:23<00:44,  1.71s/it, [0;92mdata_loading=0.000, iteration=1.918, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 576/601 [15:23<00:44,  1.77s/it, [0;92mdata_loading=0.000, iteration=1.918, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 576/601 [15:25<00:44,  1.77s/it, [0;92mdata_loading=0.012, iteration=1.488, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 577/601 [15:25<00:40,  1.69s/it, [0;92mdata_loading=0.012, iteration=1.488, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 577/601 [15:26<00:40,  1.69s/it, [0;92mdata_loading=0.011, iteration=1.590, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 578/601 [15:26<00:38,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.590, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 578/601 [15:28<00:38,  1.67s/it, [0;92mdata_loading=0.024, iteration=1.580, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 579/601 [15:28<00:36,  1.65s/it, [0;92mdata_loading=0.024, iteration=1.580, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 96% 579/601 [15:30<00:36,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.623, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 97% 580/601 [15:30<00:34,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.623, train_acc=68.69, train_loss_cross_entropy=1.091, train_loss_seg=1.091, train_macc=26.27, train_miou=19.46[0m)] 97% 580/601 [15:31<00:34,  1.64s/it, [0;92mdata_loading=0.035, iteration=1.806, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 581/601 [15:31<00:34,  1.70s/it, [0;92mdata_loading=0.035, iteration=1.806, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 581/601 [15:33<00:34,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.451, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 582/601 [15:33<00:30,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.451, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 582/601 [15:34<00:30,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.513, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 583/601 [15:34<00:28,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.513, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 583/601 [15:36<00:28,  1.59s/it, [0;92mdata_loading=0.025, iteration=1.504, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 584/601 [15:36<00:26,  1.57s/it, [0;92mdata_loading=0.025, iteration=1.504, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 584/601 [15:37<00:26,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.507, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 585/601 [15:37<00:24,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.507, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 97% 585/601 [15:39<00:24,  1.55s/it, [0;92mdata_loading=0.111, iteration=1.940, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 586/601 [15:39<00:25,  1.70s/it, [0;92mdata_loading=0.111, iteration=1.940, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 586/601 [15:41<00:25,  1.70s/it, [0;92mdata_loading=0.000, iteration=1.449, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 587/601 [15:41<00:22,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.449, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 587/601 [15:43<00:22,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.951, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 588/601 [15:43<00:22,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.951, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 588/601 [15:44<00:22,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.339, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 589/601 [15:44<00:19,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.339, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 589/601 [15:46<00:19,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.671, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 590/601 [15:46<00:17,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.671, train_acc=68.83, train_loss_cross_entropy=1.089, train_loss_seg=1.089, train_macc=26.86, train_miou=19.94[0m)] 98% 590/601 [15:47<00:17,  1.63s/it, [0;92mdata_loading=0.075, iteration=1.379, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 98% 591/601 [15:47<00:15,  1.58s/it, [0;92mdata_loading=0.075, iteration=1.379, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 98% 591/601 [15:49<00:15,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.279, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 592/601 [15:49<00:13,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.279, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 592/601 [15:50<00:13,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.432, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 593/601 [15:50<00:11,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.432, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 593/601 [15:51<00:11,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.078, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 594/601 [15:51<00:09,  1.35s/it, [0;92mdata_loading=0.000, iteration=1.078, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 594/601 [15:53<00:09,  1.35s/it, [0;92mdata_loading=0.012, iteration=1.574, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 595/601 [15:53<00:08,  1.42s/it, [0;92mdata_loading=0.012, iteration=1.574, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 595/601 [15:54<00:08,  1.42s/it, [0;92mdata_loading=0.049, iteration=1.150, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 596/601 [15:54<00:06,  1.36s/it, [0;92mdata_loading=0.049, iteration=1.150, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 596/601 [15:56<00:06,  1.36s/it, [0;92mdata_loading=0.000, iteration=1.756, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 597/601 [15:56<00:05,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.756, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)] 99% 597/601 [15:57<00:05,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.650, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)]100% 598/601 [15:57<00:04,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.650, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)]100% 598/601 [15:59<00:04,  1.53s/it, [0;92mdata_loading=0.018, iteration=1.582, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)]100% 599/601 [15:59<00:03,  1.55s/it, [0;92mdata_loading=0.018, iteration=1.582, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)]100% 599/601 [16:00<00:03,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.301, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)]100% 600/601 [16:00<00:01,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.301, train_acc=68.92, train_loss_cross_entropy=1.086, train_loss_seg=1.086, train_macc=27.06, train_miou=20.06[0m)]100% 600/601 [16:01<00:01,  1.48s/it, [0;92mdata_loading=0.011, iteration=0.585, train_acc=68.97, train_loss_cross_entropy=1.080, train_loss_seg=1.080, train_macc=27.18, train_miou=20.15[0m)]100% 601/601 [16:01<00:00,  1.21s/it, [0;92mdata_loading=0.011, iteration=0.585, train_acc=68.97, train_loss_cross_entropy=1.080, train_loss_seg=1.080, train_macc=27.18, train_miou=20.15[0m)]100% 601/601 [16:01<00:00,  1.60s/it, [0;92mdata_loading=0.011, iteration=0.585, train_acc=68.97, train_loss_cross_entropy=1.080, train_loss_seg=1.080, train_macc=27.18, train_miou=20.15[0m)]this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a train dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-18 19:41:20,025][torch_points3d.trainer][INFO] - Learning rate = 0.098850
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.

  0% 0/156 [00:00<?, ?it/s]  0% 0/156 [00:25<?, ?it/s, [0;93mval_acc=78.52, val_loss_cross_entropy=0.809, val_loss_seg=0.809, val_macc=51.56, val_miou=27.46[0m)]  1% 1/156 [00:25<1:05:17, 25.27s/it, [0;93mval_acc=78.52, val_loss_cross_entropy=0.809, val_loss_seg=0.809, val_macc=51.56, val_miou=27.46[0m)]  1% 1/156 [00:25<1:05:17, 25.27s/it, [0;93mval_acc=83.08, val_loss_cross_entropy=0.618, val_loss_seg=0.618, val_macc=55.47, val_miou=30.16[0m)]  1% 2/156 [00:25<27:45, 10.81s/it, [0;93mval_acc=83.08, val_loss_cross_entropy=0.618, val_loss_seg=0.618, val_macc=55.47, val_miou=30.16[0m)]    1% 2/156 [00:26<27:45, 10.81s/it, [0;93mval_acc=82.26, val_loss_cross_entropy=0.625, val_loss_seg=0.625, val_macc=49.15, val_miou=29.35[0m)]  2% 3/156 [00:26<15:45,  6.18s/it, [0;93mval_acc=82.26, val_loss_cross_entropy=0.625, val_loss_seg=0.625, val_macc=49.15, val_miou=29.35[0m)]  2% 3/156 [00:27<15:45,  6.18s/it, [0;93mval_acc=81.58, val_loss_cross_entropy=0.634, val_loss_seg=0.634, val_macc=49.38, val_miou=29.06[0m)]  3% 4/156 [00:27<10:10,  4.02s/it, [0;93mval_acc=81.58, val_loss_cross_entropy=0.634, val_loss_seg=0.634, val_macc=49.38, val_miou=29.06[0m)]  3% 4/156 [00:28<10:10,  4.02s/it, [0;93mval_acc=81.68, val_loss_cross_entropy=0.635, val_loss_seg=0.635, val_macc=49.13, val_miou=29.90[0m)]  3% 5/156 [00:28<07:14,  2.88s/it, [0;93mval_acc=81.68, val_loss_cross_entropy=0.635, val_loss_seg=0.635, val_macc=49.13, val_miou=29.90[0m)]  3% 5/156 [00:29<07:14,  2.88s/it, [0;93mval_acc=80.77, val_loss_cross_entropy=0.660, val_loss_seg=0.660, val_macc=47.24, val_miou=38.75[0m)]  4% 6/156 [00:29<05:56,  2.38s/it, [0;93mval_acc=80.77, val_loss_cross_entropy=0.660, val_loss_seg=0.660, val_macc=47.24, val_miou=38.75[0m)]  4% 6/156 [00:30<05:56,  2.38s/it, [0;93mval_acc=79.19, val_loss_cross_entropy=0.729, val_loss_seg=0.729, val_macc=46.18, val_miou=38.18[0m)]  4% 7/156 [00:30<04:30,  1.81s/it, [0;93mval_acc=79.19, val_loss_cross_entropy=0.729, val_loss_seg=0.729, val_macc=46.18, val_miou=38.18[0m)]  4% 7/156 [00:30<04:30,  1.81s/it, [0;93mval_acc=77.61, val_loss_cross_entropy=0.771, val_loss_seg=0.771, val_macc=45.14, val_miou=37.19[0m)]  5% 8/156 [00:30<03:31,  1.43s/it, [0;93mval_acc=77.61, val_loss_cross_entropy=0.771, val_loss_seg=0.771, val_macc=45.14, val_miou=37.19[0m)]  5% 8/156 [00:31<03:31,  1.43s/it, [0;93mval_acc=77.09, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=44.97, val_miou=36.71[0m)]  6% 9/156 [00:31<02:51,  1.17s/it, [0;93mval_acc=77.09, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=44.97, val_miou=36.71[0m)]  6% 9/156 [00:32<02:51,  1.17s/it, [0;93mval_acc=76.24, val_loss_cross_entropy=0.815, val_loss_seg=0.815, val_macc=45.24, val_miou=36.00[0m)]  6% 10/156 [00:32<02:32,  1.04s/it, [0;93mval_acc=76.24, val_loss_cross_entropy=0.815, val_loss_seg=0.815, val_macc=45.24, val_miou=36.00[0m)]  6% 10/156 [00:32<02:32,  1.04s/it, [0;93mval_acc=76.16, val_loss_cross_entropy=0.813, val_loss_seg=0.813, val_macc=45.42, val_miou=36.26[0m)]  7% 11/156 [00:32<02:10,  1.11it/s, [0;93mval_acc=76.16, val_loss_cross_entropy=0.813, val_loss_seg=0.813, val_macc=45.42, val_miou=36.26[0m)]  7% 11/156 [00:33<02:10,  1.11it/s, [0;93mval_acc=76.28, val_loss_cross_entropy=0.819, val_loss_seg=0.819, val_macc=44.80, val_miou=35.40[0m)]  8% 12/156 [00:33<01:56,  1.23it/s, [0;93mval_acc=76.28, val_loss_cross_entropy=0.819, val_loss_seg=0.819, val_macc=44.80, val_miou=35.40[0m)]  8% 12/156 [00:34<01:56,  1.23it/s, [0;93mval_acc=77.00, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=45.23, val_miou=35.70[0m)]  8% 13/156 [00:34<01:47,  1.33it/s, [0;93mval_acc=77.00, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=45.23, val_miou=35.70[0m)]  8% 13/156 [00:34<01:47,  1.33it/s, [0;93mval_acc=77.49, val_loss_cross_entropy=0.773, val_loss_seg=0.773, val_macc=45.25, val_miou=35.80[0m)]  9% 14/156 [00:34<01:40,  1.42it/s, [0;93mval_acc=77.49, val_loss_cross_entropy=0.773, val_loss_seg=0.773, val_macc=45.25, val_miou=35.80[0m)]  9% 14/156 [00:35<01:40,  1.42it/s, [0;93mval_acc=77.51, val_loss_cross_entropy=0.765, val_loss_seg=0.765, val_macc=45.31, val_miou=35.85[0m)] 10% 15/156 [00:35<01:35,  1.48it/s, [0;93mval_acc=77.51, val_loss_cross_entropy=0.765, val_loss_seg=0.765, val_macc=45.31, val_miou=35.85[0m)] 10% 15/156 [00:35<01:35,  1.48it/s, [0;93mval_acc=78.08, val_loss_cross_entropy=0.741, val_loss_seg=0.741, val_macc=45.23, val_miou=35.83[0m)] 10% 16/156 [00:35<01:34,  1.48it/s, [0;93mval_acc=78.08, val_loss_cross_entropy=0.741, val_loss_seg=0.741, val_macc=45.23, val_miou=35.83[0m)] 10% 16/156 [00:36<01:34,  1.48it/s, [0;93mval_acc=78.54, val_loss_cross_entropy=0.729, val_loss_seg=0.729, val_macc=45.20, val_miou=35.78[0m)] 11% 17/156 [00:36<01:33,  1.49it/s, [0;93mval_acc=78.54, val_loss_cross_entropy=0.729, val_loss_seg=0.729, val_macc=45.20, val_miou=35.78[0m)] 11% 17/156 [00:37<01:33,  1.49it/s, [0;93mval_acc=79.03, val_loss_cross_entropy=0.729, val_loss_seg=0.729, val_macc=45.20, val_miou=35.83[0m)] 12% 18/156 [00:37<01:32,  1.49it/s, [0;93mval_acc=79.03, val_loss_cross_entropy=0.729, val_loss_seg=0.729, val_macc=45.20, val_miou=35.83[0m)] 12% 18/156 [00:37<01:32,  1.49it/s, [0;93mval_acc=79.38, val_loss_cross_entropy=0.715, val_loss_seg=0.715, val_macc=45.36, val_miou=35.99[0m)] 12% 19/156 [00:37<01:28,  1.55it/s, [0;93mval_acc=79.38, val_loss_cross_entropy=0.715, val_loss_seg=0.715, val_macc=45.36, val_miou=35.99[0m)] 12% 19/156 [00:38<01:28,  1.55it/s, [0;93mval_acc=79.26, val_loss_cross_entropy=0.724, val_loss_seg=0.724, val_macc=45.51, val_miou=36.11[0m)] 13% 20/156 [00:38<01:18,  1.72it/s, [0;93mval_acc=79.26, val_loss_cross_entropy=0.724, val_loss_seg=0.724, val_macc=45.51, val_miou=36.11[0m)] 13% 20/156 [00:38<01:18,  1.72it/s, [0;93mval_acc=78.96, val_loss_cross_entropy=0.724, val_loss_seg=0.724, val_macc=45.43, val_miou=35.39[0m)] 13% 21/156 [00:38<01:25,  1.58it/s, [0;93mval_acc=78.96, val_loss_cross_entropy=0.724, val_loss_seg=0.724, val_macc=45.43, val_miou=35.39[0m)] 13% 21/156 [00:39<01:25,  1.58it/s, [0;93mval_acc=78.73, val_loss_cross_entropy=0.728, val_loss_seg=0.728, val_macc=45.25, val_miou=34.73[0m)] 14% 22/156 [00:39<01:22,  1.63it/s, [0;93mval_acc=78.73, val_loss_cross_entropy=0.728, val_loss_seg=0.728, val_macc=45.25, val_miou=34.73[0m)] 14% 22/156 [00:40<01:22,  1.63it/s, [0;93mval_acc=78.60, val_loss_cross_entropy=0.731, val_loss_seg=0.731, val_macc=45.19, val_miou=34.75[0m)] 15% 23/156 [00:40<01:19,  1.67it/s, [0;93mval_acc=78.60, val_loss_cross_entropy=0.731, val_loss_seg=0.731, val_macc=45.19, val_miou=34.75[0m)] 15% 23/156 [00:40<01:19,  1.67it/s, [0;93mval_acc=78.82, val_loss_cross_entropy=0.714, val_loss_seg=0.714, val_macc=45.47, val_miou=35.07[0m)] 15% 24/156 [00:40<01:16,  1.73it/s, [0;93mval_acc=78.82, val_loss_cross_entropy=0.714, val_loss_seg=0.714, val_macc=45.47, val_miou=35.07[0m)] 15% 24/156 [00:41<01:16,  1.73it/s, [0;93mval_acc=78.72, val_loss_cross_entropy=0.721, val_loss_seg=0.721, val_macc=45.39, val_miou=35.18[0m)] 16% 25/156 [00:41<01:14,  1.75it/s, [0;93mval_acc=78.72, val_loss_cross_entropy=0.721, val_loss_seg=0.721, val_macc=45.39, val_miou=35.18[0m)] 16% 25/156 [00:41<01:14,  1.75it/s, [0;93mval_acc=78.53, val_loss_cross_entropy=0.731, val_loss_seg=0.731, val_macc=45.49, val_miou=35.06[0m)] 17% 26/156 [00:41<01:12,  1.79it/s, [0;93mval_acc=78.53, val_loss_cross_entropy=0.731, val_loss_seg=0.731, val_macc=45.49, val_miou=35.06[0m)] 17% 26/156 [00:42<01:12,  1.79it/s, [0;93mval_acc=78.42, val_loss_cross_entropy=0.735, val_loss_seg=0.735, val_macc=46.00, val_miou=35.91[0m)] 17% 27/156 [00:42<01:08,  1.87it/s, [0;93mval_acc=78.42, val_loss_cross_entropy=0.735, val_loss_seg=0.735, val_macc=46.00, val_miou=35.91[0m)] 17% 27/156 [00:42<01:08,  1.87it/s, [0;93mval_acc=78.38, val_loss_cross_entropy=0.737, val_loss_seg=0.737, val_macc=46.60, val_miou=36.66[0m)] 18% 28/156 [00:42<01:07,  1.91it/s, [0;93mval_acc=78.38, val_loss_cross_entropy=0.737, val_loss_seg=0.737, val_macc=46.60, val_miou=36.66[0m)] 18% 28/156 [00:46<01:07,  1.91it/s, [0;93mval_acc=78.55, val_loss_cross_entropy=0.736, val_loss_seg=0.736, val_macc=45.07, val_miou=35.86[0m)] 19% 29/156 [00:46<02:58,  1.40s/it, [0;93mval_acc=78.55, val_loss_cross_entropy=0.736, val_loss_seg=0.736, val_macc=45.07, val_miou=35.86[0m)] 19% 29/156 [00:46<02:58,  1.40s/it, [0;93mval_acc=78.97, val_loss_cross_entropy=0.725, val_loss_seg=0.725, val_macc=44.97, val_miou=35.76[0m)] 19% 30/156 [00:46<02:31,  1.20s/it, [0;93mval_acc=78.97, val_loss_cross_entropy=0.725, val_loss_seg=0.725, val_macc=44.97, val_miou=35.76[0m)] 19% 30/156 [00:47<02:31,  1.20s/it, [0;93mval_acc=78.88, val_loss_cross_entropy=0.728, val_loss_seg=0.728, val_macc=45.04, val_miou=35.86[0m)] 20% 31/156 [00:47<02:06,  1.01s/it, [0;93mval_acc=78.88, val_loss_cross_entropy=0.728, val_loss_seg=0.728, val_macc=45.04, val_miou=35.86[0m)] 20% 31/156 [00:48<02:06,  1.01s/it, [0;93mval_acc=79.01, val_loss_cross_entropy=0.732, val_loss_seg=0.732, val_macc=44.60, val_miou=35.70[0m)] 21% 32/156 [00:48<01:53,  1.09it/s, [0;93mval_acc=79.01, val_loss_cross_entropy=0.732, val_loss_seg=0.732, val_macc=44.60, val_miou=35.70[0m)] 21% 32/156 [00:48<01:53,  1.09it/s, [0;93mval_acc=78.59, val_loss_cross_entropy=0.747, val_loss_seg=0.747, val_macc=44.00, val_miou=35.29[0m)] 21% 33/156 [00:48<01:44,  1.17it/s, [0;93mval_acc=78.59, val_loss_cross_entropy=0.747, val_loss_seg=0.747, val_macc=44.00, val_miou=35.29[0m)] 21% 33/156 [00:51<01:44,  1.17it/s, [0;93mval_acc=77.69, val_loss_cross_entropy=0.762, val_loss_seg=0.762, val_macc=42.22, val_miou=33.76[0m)] 22% 34/156 [00:51<02:33,  1.26s/it, [0;93mval_acc=77.69, val_loss_cross_entropy=0.762, val_loss_seg=0.762, val_macc=42.22, val_miou=33.76[0m)] 22% 34/156 [00:54<02:33,  1.26s/it, [0;93mval_acc=76.53, val_loss_cross_entropy=0.781, val_loss_seg=0.781, val_macc=41.39, val_miou=32.91[0m)] 22% 35/156 [00:54<04:00,  1.98s/it, [0;93mval_acc=76.53, val_loss_cross_entropy=0.781, val_loss_seg=0.781, val_macc=41.39, val_miou=32.91[0m)] 22% 35/156 [00:55<04:00,  1.98s/it, [0;93mval_acc=76.36, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=41.39, val_miou=32.90[0m)] 23% 36/156 [00:55<03:10,  1.58s/it, [0;93mval_acc=76.36, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=41.39, val_miou=32.90[0m)] 23% 36/156 [00:56<03:10,  1.58s/it, [0;93mval_acc=75.92, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=41.30, val_miou=32.66[0m)] 24% 37/156 [00:56<02:36,  1.31s/it, [0;93mval_acc=75.92, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=41.30, val_miou=32.66[0m)] 24% 37/156 [00:56<02:36,  1.31s/it, [0;93mval_acc=75.59, val_loss_cross_entropy=0.805, val_loss_seg=0.805, val_macc=41.30, val_miou=32.70[0m)] 24% 38/156 [00:56<02:17,  1.17s/it, [0;93mval_acc=75.59, val_loss_cross_entropy=0.805, val_loss_seg=0.805, val_macc=41.30, val_miou=32.70[0m)] 24% 38/156 [01:03<02:17,  1.17s/it, [0;93mval_acc=75.29, val_loss_cross_entropy=0.811, val_loss_seg=0.811, val_macc=40.57, val_miou=32.27[0m)] 25% 39/156 [01:03<05:09,  2.65s/it, [0;93mval_acc=75.29, val_loss_cross_entropy=0.811, val_loss_seg=0.811, val_macc=40.57, val_miou=32.27[0m)] 25% 39/156 [01:03<05:09,  2.65s/it, [0;93mval_acc=75.61, val_loss_cross_entropy=0.808, val_loss_seg=0.808, val_macc=40.55, val_miou=32.30[0m)] 26% 40/156 [01:03<04:02,  2.09s/it, [0;93mval_acc=75.61, val_loss_cross_entropy=0.808, val_loss_seg=0.808, val_macc=40.55, val_miou=32.30[0m)] 26% 40/156 [01:04<04:02,  2.09s/it, [0;93mval_acc=75.69, val_loss_cross_entropy=0.806, val_loss_seg=0.806, val_macc=40.63, val_miou=32.44[0m)] 26% 41/156 [01:04<03:11,  1.66s/it, [0;93mval_acc=75.69, val_loss_cross_entropy=0.806, val_loss_seg=0.806, val_macc=40.63, val_miou=32.44[0m)] 26% 41/156 [01:05<03:11,  1.66s/it, [0;93mval_acc=75.58, val_loss_cross_entropy=0.814, val_loss_seg=0.814, val_macc=40.63, val_miou=32.47[0m)] 27% 42/156 [01:05<02:31,  1.33s/it, [0;93mval_acc=75.58, val_loss_cross_entropy=0.814, val_loss_seg=0.814, val_macc=40.63, val_miou=32.47[0m)] 27% 42/156 [01:05<02:31,  1.33s/it, [0;93mval_acc=75.71, val_loss_cross_entropy=0.809, val_loss_seg=0.809, val_macc=40.68, val_miou=32.50[0m)] 28% 43/156 [01:05<02:07,  1.13s/it, [0;93mval_acc=75.71, val_loss_cross_entropy=0.809, val_loss_seg=0.809, val_macc=40.68, val_miou=32.50[0m)] 28% 43/156 [01:06<02:07,  1.13s/it, [0;93mval_acc=75.69, val_loss_cross_entropy=0.809, val_loss_seg=0.809, val_macc=40.83, val_miou=32.60[0m)] 28% 44/156 [01:06<01:46,  1.05it/s, [0;93mval_acc=75.69, val_loss_cross_entropy=0.809, val_loss_seg=0.809, val_macc=40.83, val_miou=32.60[0m)] 28% 44/156 [01:06<01:46,  1.05it/s, [0;93mval_acc=75.78, val_loss_cross_entropy=0.803, val_loss_seg=0.803, val_macc=40.94, val_miou=32.71[0m)] 29% 45/156 [01:06<01:32,  1.20it/s, [0;93mval_acc=75.78, val_loss_cross_entropy=0.803, val_loss_seg=0.803, val_macc=40.94, val_miou=32.71[0m)] 29% 45/156 [01:07<01:32,  1.20it/s, [0;93mval_acc=75.37, val_loss_cross_entropy=0.819, val_loss_seg=0.819, val_macc=41.02, val_miou=32.69[0m)] 29% 46/156 [01:07<01:26,  1.28it/s, [0;93mval_acc=75.37, val_loss_cross_entropy=0.819, val_loss_seg=0.819, val_macc=41.02, val_miou=32.69[0m)] 29% 46/156 [01:08<01:26,  1.28it/s, [0;93mval_acc=75.28, val_loss_cross_entropy=0.821, val_loss_seg=0.821, val_macc=40.96, val_miou=32.60[0m)] 30% 47/156 [01:08<01:24,  1.29it/s, [0;93mval_acc=75.28, val_loss_cross_entropy=0.821, val_loss_seg=0.821, val_macc=40.96, val_miou=32.60[0m)] 30% 47/156 [01:09<01:24,  1.29it/s, [0;93mval_acc=75.03, val_loss_cross_entropy=0.827, val_loss_seg=0.827, val_macc=40.77, val_miou=32.40[0m)] 31% 48/156 [01:09<01:29,  1.20it/s, [0;93mval_acc=75.03, val_loss_cross_entropy=0.827, val_loss_seg=0.827, val_macc=40.77, val_miou=32.40[0m)] 31% 48/156 [01:09<01:29,  1.20it/s, [0;93mval_acc=75.10, val_loss_cross_entropy=0.822, val_loss_seg=0.822, val_macc=40.74, val_miou=32.36[0m)] 31% 49/156 [01:09<01:21,  1.31it/s, [0;93mval_acc=75.10, val_loss_cross_entropy=0.822, val_loss_seg=0.822, val_macc=40.74, val_miou=32.36[0m)] 31% 49/156 [01:10<01:21,  1.31it/s, [0;93mval_acc=75.26, val_loss_cross_entropy=0.818, val_loss_seg=0.818, val_macc=40.69, val_miou=32.40[0m)] 32% 50/156 [01:10<01:19,  1.33it/s, [0;93mval_acc=75.26, val_loss_cross_entropy=0.818, val_loss_seg=0.818, val_macc=40.69, val_miou=32.40[0m)] 32% 50/156 [01:11<01:19,  1.33it/s, [0;93mval_acc=75.56, val_loss_cross_entropy=0.814, val_loss_seg=0.814, val_macc=40.48, val_miou=32.33[0m)] 33% 51/156 [01:11<01:23,  1.25it/s, [0;93mval_acc=75.56, val_loss_cross_entropy=0.814, val_loss_seg=0.814, val_macc=40.48, val_miou=32.33[0m)] 33% 51/156 [01:12<01:23,  1.25it/s, [0;93mval_acc=75.93, val_loss_cross_entropy=0.806, val_loss_seg=0.806, val_macc=40.54, val_miou=32.44[0m)] 33% 52/156 [01:12<01:23,  1.25it/s, [0;93mval_acc=75.93, val_loss_cross_entropy=0.806, val_loss_seg=0.806, val_macc=40.54, val_miou=32.44[0m)] 33% 52/156 [01:12<01:23,  1.25it/s, [0;93mval_acc=76.13, val_loss_cross_entropy=0.799, val_loss_seg=0.799, val_macc=40.53, val_miou=32.49[0m)] 34% 53/156 [01:12<01:18,  1.31it/s, [0;93mval_acc=76.13, val_loss_cross_entropy=0.799, val_loss_seg=0.799, val_macc=40.53, val_miou=32.49[0m)] 34% 53/156 [01:13<01:18,  1.31it/s, [0;93mval_acc=76.22, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=40.59, val_miou=32.59[0m)] 35% 54/156 [01:13<01:10,  1.45it/s, [0;93mval_acc=76.22, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=40.59, val_miou=32.59[0m)] 35% 54/156 [01:14<01:10,  1.45it/s, [0;93mval_acc=76.36, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=40.55, val_miou=32.57[0m)] 35% 55/156 [01:14<01:07,  1.50it/s, [0;93mval_acc=76.36, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=40.55, val_miou=32.57[0m)] 35% 55/156 [01:14<01:07,  1.50it/s, [0;93mval_acc=76.33, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=40.88, val_miou=32.86[0m)] 36% 56/156 [01:14<01:06,  1.51it/s, [0;93mval_acc=76.33, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=40.88, val_miou=32.86[0m)] 36% 56/156 [01:15<01:06,  1.51it/s, [0;93mval_acc=76.01, val_loss_cross_entropy=0.799, val_loss_seg=0.799, val_macc=40.74, val_miou=32.69[0m)] 37% 57/156 [01:15<01:10,  1.41it/s, [0;93mval_acc=76.01, val_loss_cross_entropy=0.799, val_loss_seg=0.799, val_macc=40.74, val_miou=32.69[0m)] 37% 57/156 [01:16<01:10,  1.41it/s, [0;93mval_acc=75.89, val_loss_cross_entropy=0.806, val_loss_seg=0.806, val_macc=40.56, val_miou=32.52[0m)] 37% 58/156 [01:16<01:05,  1.49it/s, [0;93mval_acc=75.89, val_loss_cross_entropy=0.806, val_loss_seg=0.806, val_macc=40.56, val_miou=32.52[0m)] 37% 58/156 [01:16<01:05,  1.49it/s, [0;93mval_acc=76.10, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=40.60, val_miou=32.57[0m)] 38% 59/156 [01:16<01:03,  1.52it/s, [0;93mval_acc=76.10, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=40.60, val_miou=32.57[0m)] 38% 59/156 [01:17<01:03,  1.52it/s, [0;93mval_acc=76.13, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=40.74, val_miou=32.69[0m)] 38% 60/156 [01:17<00:59,  1.61it/s, [0;93mval_acc=76.13, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=40.74, val_miou=32.69[0m)] 38% 60/156 [01:17<00:59,  1.61it/s, [0;93mval_acc=76.08, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=40.80, val_miou=32.73[0m)] 39% 61/156 [01:17<00:57,  1.66it/s, [0;93mval_acc=76.08, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=40.80, val_miou=32.73[0m)] 39% 61/156 [01:18<00:57,  1.66it/s, [0;93mval_acc=76.10, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=40.80, val_miou=32.74[0m)] 40% 62/156 [01:18<00:59,  1.59it/s, [0;93mval_acc=76.10, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=40.80, val_miou=32.74[0m)] 40% 62/156 [01:19<00:59,  1.59it/s, [0;93mval_acc=76.22, val_loss_cross_entropy=0.786, val_loss_seg=0.786, val_macc=40.81, val_miou=32.75[0m)] 40% 63/156 [01:19<00:57,  1.60it/s, [0;93mval_acc=76.22, val_loss_cross_entropy=0.786, val_loss_seg=0.786, val_macc=40.81, val_miou=32.75[0m)] 40% 63/156 [01:19<00:57,  1.60it/s, [0;93mval_acc=76.02, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=40.87, val_miou=32.72[0m)] 41% 64/156 [01:19<00:57,  1.61it/s, [0;93mval_acc=76.02, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=40.87, val_miou=32.72[0m)] 41% 64/156 [01:20<00:57,  1.61it/s, [0;93mval_acc=75.92, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=40.90, val_miou=32.69[0m)] 42% 65/156 [01:20<00:55,  1.64it/s, [0;93mval_acc=75.92, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=40.90, val_miou=32.69[0m)] 42% 65/156 [01:20<00:55,  1.64it/s, [0;93mval_acc=75.90, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=40.91, val_miou=32.67[0m)] 42% 66/156 [01:20<00:54,  1.64it/s, [0;93mval_acc=75.90, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=40.91, val_miou=32.67[0m)] 42% 66/156 [01:21<00:54,  1.64it/s, [0;93mval_acc=75.87, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=41.33, val_miou=33.06[0m)] 43% 67/156 [01:21<00:50,  1.78it/s, [0;93mval_acc=75.87, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=41.33, val_miou=33.06[0m)] 43% 67/156 [01:21<00:50,  1.78it/s, [0;93mval_acc=75.84, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.43, val_miou=33.14[0m)] 44% 68/156 [01:21<00:49,  1.77it/s, [0;93mval_acc=75.84, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.43, val_miou=33.14[0m)] 44% 68/156 [01:22<00:49,  1.77it/s, [0;93mval_acc=75.84, val_loss_cross_entropy=0.802, val_loss_seg=0.802, val_macc=41.41, val_miou=33.12[0m)] 44% 69/156 [01:22<00:52,  1.64it/s, [0;93mval_acc=75.84, val_loss_cross_entropy=0.802, val_loss_seg=0.802, val_macc=41.41, val_miou=33.12[0m)] 44% 69/156 [01:23<00:52,  1.64it/s, [0;93mval_acc=75.87, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.37, val_miou=32.95[0m)] 45% 70/156 [01:23<00:50,  1.71it/s, [0;93mval_acc=75.87, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.37, val_miou=32.95[0m)] 45% 70/156 [01:23<00:50,  1.71it/s, [0;93mval_acc=75.87, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.32, val_miou=32.81[0m)] 46% 71/156 [01:23<00:48,  1.74it/s, [0;93mval_acc=75.87, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.32, val_miou=32.81[0m)] 46% 71/156 [01:24<00:48,  1.74it/s, [0;93mval_acc=75.86, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.28, val_miou=32.75[0m)] 46% 72/156 [01:24<00:47,  1.77it/s, [0;93mval_acc=75.86, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.28, val_miou=32.75[0m)] 46% 72/156 [01:24<00:47,  1.77it/s, [0;93mval_acc=75.94, val_loss_cross_entropy=0.797, val_loss_seg=0.797, val_macc=41.29, val_miou=32.75[0m)] 47% 73/156 [01:24<00:47,  1.74it/s, [0;93mval_acc=75.94, val_loss_cross_entropy=0.797, val_loss_seg=0.797, val_macc=41.29, val_miou=32.75[0m)] 47% 73/156 [01:25<00:47,  1.74it/s, [0;93mval_acc=76.23, val_loss_cross_entropy=0.79 , val_loss_seg=0.79 , val_macc=41.36, val_miou=32.86[0m)] 47% 74/156 [01:25<00:50,  1.64it/s, [0;93mval_acc=76.23, val_loss_cross_entropy=0.79 , val_loss_seg=0.79 , val_macc=41.36, val_miou=32.86[0m)] 47% 74/156 [01:26<00:50,  1.64it/s, [0;93mval_acc=76.25, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=41.32, val_miou=32.82[0m)] 48% 75/156 [01:26<00:48,  1.67it/s, [0;93mval_acc=76.25, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=41.32, val_miou=32.82[0m)] 48% 75/156 [01:28<00:48,  1.67it/s, [0;93mval_acc=76.11, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=41.23, val_miou=32.77[0m)] 49% 76/156 [01:28<01:25,  1.06s/it, [0;93mval_acc=76.11, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=41.23, val_miou=32.77[0m)] 49% 76/156 [01:28<01:25,  1.06s/it, [0;93mval_acc=76.10, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=41.52, val_miou=32.97[0m)] 49% 77/156 [01:28<01:16,  1.04it/s, [0;93mval_acc=76.10, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=41.52, val_miou=32.97[0m)] 49% 77/156 [01:29<01:16,  1.04it/s, [0;93mval_acc=76.09, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=41.62, val_miou=33.04[0m)] 50% 78/156 [01:29<01:05,  1.19it/s, [0;93mval_acc=76.09, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=41.62, val_miou=33.04[0m)] 50% 78/156 [01:30<01:05,  1.19it/s, [0;93mval_acc=76.04, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.63, val_miou=33.04[0m)] 51% 79/156 [01:30<00:57,  1.35it/s, [0;93mval_acc=76.04, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.63, val_miou=33.04[0m)] 51% 79/156 [01:30<00:57,  1.35it/s, [0;93mval_acc=76.06, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.67, val_miou=33.05[0m)] 51% 80/156 [01:30<00:54,  1.40it/s, [0;93mval_acc=76.06, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.67, val_miou=33.05[0m)] 51% 80/156 [01:32<00:54,  1.40it/s, [0;93mval_acc=76.00, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=41.65, val_miou=32.99[0m)] 52% 81/156 [01:32<01:13,  1.02it/s, [0;93mval_acc=76.00, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=41.65, val_miou=32.99[0m)] 52% 81/156 [01:32<01:13,  1.02it/s, [0;93mval_acc=75.95, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.52, val_miou=32.84[0m)] 53% 82/156 [01:32<01:04,  1.15it/s, [0;93mval_acc=75.95, val_loss_cross_entropy=0.800, val_loss_seg=0.800, val_macc=41.52, val_miou=32.84[0m)] 53% 82/156 [01:33<01:04,  1.15it/s, [0;93mval_acc=75.90, val_loss_cross_entropy=0.802, val_loss_seg=0.802, val_macc=41.66, val_miou=32.95[0m)] 53% 83/156 [01:33<00:57,  1.26it/s, [0;93mval_acc=75.90, val_loss_cross_entropy=0.802, val_loss_seg=0.802, val_macc=41.66, val_miou=32.95[0m)] 53% 83/156 [01:34<00:57,  1.26it/s, [0;93mval_acc=75.98, val_loss_cross_entropy=0.799, val_loss_seg=0.799, val_macc=41.87, val_miou=33.14[0m)] 54% 84/156 [01:34<00:52,  1.37it/s, [0;93mval_acc=75.98, val_loss_cross_entropy=0.799, val_loss_seg=0.799, val_macc=41.87, val_miou=33.14[0m)] 54% 84/156 [01:34<00:52,  1.37it/s, [0;93mval_acc=76.11, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.91, val_miou=33.18[0m)] 54% 85/156 [01:34<00:49,  1.44it/s, [0;93mval_acc=76.11, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.91, val_miou=33.18[0m)] 54% 85/156 [01:39<00:49,  1.44it/s, [0;93mval_acc=76.28, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=41.92, val_miou=33.23[0m)] 55% 86/156 [01:39<02:09,  1.86s/it, [0;93mval_acc=76.28, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=41.92, val_miou=33.23[0m)] 55% 86/156 [01:39<02:09,  1.86s/it, [0;93mval_acc=76.22, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=41.89, val_miou=33.18[0m)] 56% 87/156 [01:39<01:40,  1.46s/it, [0;93mval_acc=76.22, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=41.89, val_miou=33.18[0m)] 56% 87/156 [01:40<01:40,  1.46s/it, [0;93mval_acc=76.24, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=41.90, val_miou=33.18[0m)] 56% 88/156 [01:40<01:21,  1.20s/it, [0;93mval_acc=76.24, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=41.90, val_miou=33.18[0m)] 56% 88/156 [01:41<01:21,  1.20s/it, [0;93mval_acc=76.25, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.91, val_miou=33.14[0m)] 57% 89/156 [01:41<01:08,  1.02s/it, [0;93mval_acc=76.25, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.91, val_miou=33.14[0m)] 57% 89/156 [01:41<01:08,  1.02s/it, [0;93mval_acc=76.30, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=41.97, val_miou=33.21[0m)] 58% 90/156 [01:41<00:58,  1.13it/s, [0;93mval_acc=76.30, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=41.97, val_miou=33.21[0m)] 58% 90/156 [01:42<00:58,  1.13it/s, [0;93mval_acc=76.35, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.12, val_miou=33.34[0m)] 58% 91/156 [01:42<00:50,  1.29it/s, [0;93mval_acc=76.35, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.12, val_miou=33.34[0m)] 58% 91/156 [01:42<00:50,  1.29it/s, [0;93mval_acc=76.33, val_loss_cross_entropy=0.789, val_loss_seg=0.789, val_macc=42.14, val_miou=33.32[0m)] 59% 92/156 [01:42<00:44,  1.42it/s, [0;93mval_acc=76.33, val_loss_cross_entropy=0.789, val_loss_seg=0.789, val_macc=42.14, val_miou=33.32[0m)] 59% 92/156 [01:43<00:44,  1.42it/s, [0;93mval_acc=76.14, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=42.04, val_miou=33.09[0m)] 60% 93/156 [01:43<00:42,  1.48it/s, [0;93mval_acc=76.14, val_loss_cross_entropy=0.796, val_loss_seg=0.796, val_macc=42.04, val_miou=33.09[0m)] 60% 93/156 [01:43<00:42,  1.48it/s, [0;93mval_acc=76.19, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=42.09, val_miou=33.14[0m)] 60% 94/156 [01:43<00:41,  1.51it/s, [0;93mval_acc=76.19, val_loss_cross_entropy=0.793, val_loss_seg=0.793, val_macc=42.09, val_miou=33.14[0m)] 60% 94/156 [01:44<00:41,  1.51it/s, [0;93mval_acc=76.21, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.11, val_miou=33.15[0m)] 61% 95/156 [01:44<00:40,  1.51it/s, [0;93mval_acc=76.21, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.11, val_miou=33.15[0m)] 61% 95/156 [01:45<00:40,  1.51it/s, [0;93mval_acc=76.38, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.22, val_miou=33.30[0m)] 62% 96/156 [01:45<00:44,  1.36it/s, [0;93mval_acc=76.38, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.22, val_miou=33.30[0m)] 62% 96/156 [01:46<00:44,  1.36it/s, [0;93mval_acc=76.46, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=42.29, val_miou=33.37[0m)] 62% 97/156 [01:46<00:41,  1.42it/s, [0;93mval_acc=76.46, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=42.29, val_miou=33.37[0m)] 62% 97/156 [01:46<00:41,  1.42it/s, [0;93mval_acc=76.47, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=42.31, val_miou=33.38[0m)] 63% 98/156 [01:46<00:36,  1.59it/s, [0;93mval_acc=76.47, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=42.31, val_miou=33.38[0m)] 63% 98/156 [01:48<00:36,  1.59it/s, [0;93mval_acc=76.69, val_loss_cross_entropy=0.780, val_loss_seg=0.780, val_macc=42.35, val_miou=33.45[0m)] 63% 99/156 [01:48<00:57,  1.02s/it, [0;93mval_acc=76.69, val_loss_cross_entropy=0.780, val_loss_seg=0.780, val_macc=42.35, val_miou=33.45[0m)] 63% 99/156 [01:49<00:57,  1.02s/it, [0;93mval_acc=76.84, val_loss_cross_entropy=0.777, val_loss_seg=0.777, val_macc=42.37, val_miou=33.49[0m)] 64% 100/156 [01:49<00:52,  1.08it/s, [0;93mval_acc=76.84, val_loss_cross_entropy=0.777, val_loss_seg=0.777, val_macc=42.37, val_miou=33.49[0m)] 64% 100/156 [01:49<00:52,  1.08it/s, [0;93mval_acc=76.97, val_loss_cross_entropy=0.773, val_loss_seg=0.773, val_macc=42.4 , val_miou=33.52[0m)] 65% 101/156 [01:49<00:45,  1.20it/s, [0;93mval_acc=76.97, val_loss_cross_entropy=0.773, val_loss_seg=0.773, val_macc=42.4 , val_miou=33.52[0m)] 65% 101/156 [01:50<00:45,  1.20it/s, [0;93mval_acc=76.84, val_loss_cross_entropy=0.779, val_loss_seg=0.779, val_macc=42.28, val_miou=33.40[0m)] 65% 102/156 [01:50<00:41,  1.31it/s, [0;93mval_acc=76.84, val_loss_cross_entropy=0.779, val_loss_seg=0.779, val_macc=42.28, val_miou=33.40[0m)] 65% 102/156 [01:50<00:41,  1.31it/s, [0;93mval_acc=76.74, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=42.32, val_miou=33.37[0m)] 66% 103/156 [01:50<00:37,  1.43it/s, [0;93mval_acc=76.74, val_loss_cross_entropy=0.784, val_loss_seg=0.784, val_macc=42.32, val_miou=33.37[0m)] 66% 103/156 [01:51<00:37,  1.43it/s, [0;93mval_acc=76.63, val_loss_cross_entropy=0.790, val_loss_seg=0.790, val_macc=42.27, val_miou=33.30[0m)] 67% 104/156 [01:51<00:36,  1.44it/s, [0;93mval_acc=76.63, val_loss_cross_entropy=0.790, val_loss_seg=0.790, val_macc=42.27, val_miou=33.30[0m)] 67% 104/156 [01:52<00:36,  1.44it/s, [0;93mval_acc=76.53, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=42.25, val_miou=33.23[0m)] 67% 105/156 [01:52<00:35,  1.44it/s, [0;93mval_acc=76.53, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=42.25, val_miou=33.23[0m)] 67% 105/156 [01:52<00:35,  1.44it/s, [0;93mval_acc=76.57, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.30, val_miou=33.28[0m)] 68% 106/156 [01:52<00:34,  1.47it/s, [0;93mval_acc=76.57, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.30, val_miou=33.28[0m)] 68% 106/156 [01:53<00:34,  1.47it/s, [0;93mval_acc=76.47, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=42.31, val_miou=33.20[0m)] 69% 107/156 [01:53<00:33,  1.47it/s, [0;93mval_acc=76.47, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=42.31, val_miou=33.20[0m)] 69% 107/156 [01:54<00:33,  1.47it/s, [0;93mval_acc=76.41, val_loss_cross_entropy=0.797, val_loss_seg=0.797, val_macc=42.31, val_miou=33.18[0m)] 69% 108/156 [01:54<00:31,  1.55it/s, [0;93mval_acc=76.41, val_loss_cross_entropy=0.797, val_loss_seg=0.797, val_macc=42.31, val_miou=33.18[0m)] 69% 108/156 [01:54<00:31,  1.55it/s, [0;93mval_acc=76.50, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=42.33, val_miou=33.21[0m)] 70% 109/156 [01:54<00:31,  1.48it/s, [0;93mval_acc=76.50, val_loss_cross_entropy=0.795, val_loss_seg=0.795, val_macc=42.33, val_miou=33.21[0m)] 70% 109/156 [01:55<00:31,  1.48it/s, [0;93mval_acc=76.50, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=42.30, val_miou=33.19[0m)] 71% 110/156 [01:55<00:30,  1.51it/s, [0;93mval_acc=76.50, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=42.30, val_miou=33.19[0m)] 71% 110/156 [01:56<00:30,  1.51it/s, [0;93mval_acc=76.50, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=42.25, val_miou=33.16[0m)] 71% 111/156 [01:56<00:29,  1.53it/s, [0;93mval_acc=76.50, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=42.25, val_miou=33.16[0m)] 71% 111/156 [01:56<00:29,  1.53it/s, [0;93mval_acc=76.55, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.33, val_miou=33.23[0m)] 72% 112/156 [01:56<00:28,  1.57it/s, [0;93mval_acc=76.55, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.33, val_miou=33.23[0m)] 72% 112/156 [01:57<00:28,  1.57it/s, [0;93mval_acc=76.51, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=42.38, val_miou=33.28[0m)] 72% 113/156 [01:57<00:28,  1.53it/s, [0;93mval_acc=76.51, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=42.38, val_miou=33.28[0m)] 72% 113/156 [01:58<00:28,  1.53it/s, [0;93mval_acc=76.52, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.42, val_miou=33.31[0m)] 73% 114/156 [01:58<00:28,  1.49it/s, [0;93mval_acc=76.52, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.42, val_miou=33.31[0m)] 73% 114/156 [01:58<00:28,  1.49it/s, [0;93mval_acc=76.60, val_loss_cross_entropy=0.789, val_loss_seg=0.789, val_macc=42.42, val_miou=33.31[0m)] 74% 115/156 [01:58<00:26,  1.53it/s, [0;93mval_acc=76.60, val_loss_cross_entropy=0.789, val_loss_seg=0.789, val_macc=42.42, val_miou=33.31[0m)] 74% 115/156 [01:59<00:26,  1.53it/s, [0;93mval_acc=76.60, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.19, val_miou=33.12[0m)] 74% 116/156 [01:59<00:26,  1.52it/s, [0;93mval_acc=76.60, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.19, val_miou=33.12[0m)] 74% 116/156 [02:00<00:26,  1.52it/s, [0;93mval_acc=76.65, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.14, val_miou=33.06[0m)] 75% 117/156 [02:00<00:30,  1.26it/s, [0;93mval_acc=76.65, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.14, val_miou=33.06[0m)] 75% 117/156 [02:02<00:30,  1.26it/s, [0;93mval_acc=76.79, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.15, val_miou=33.08[0m)] 76% 118/156 [02:02<00:38,  1.01s/it, [0;93mval_acc=76.79, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.15, val_miou=33.08[0m)] 76% 118/156 [02:02<00:38,  1.01s/it, [0;93mval_acc=76.80, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.12, val_miou=33.03[0m)] 76% 119/156 [02:02<00:35,  1.05it/s, [0;93mval_acc=76.80, val_loss_cross_entropy=0.788, val_loss_seg=0.788, val_macc=42.12, val_miou=33.03[0m)] 76% 119/156 [02:03<00:35,  1.05it/s, [0;93mval_acc=76.74, val_loss_cross_entropy=0.790, val_loss_seg=0.790, val_macc=42.12, val_miou=33.00[0m)] 77% 120/156 [02:03<00:30,  1.18it/s, [0;93mval_acc=76.74, val_loss_cross_entropy=0.790, val_loss_seg=0.790, val_macc=42.12, val_miou=33.00[0m)] 77% 120/156 [02:04<00:30,  1.18it/s, [0;93mval_acc=76.74, val_loss_cross_entropy=0.790, val_loss_seg=0.790, val_macc=42.13, val_miou=32.99[0m)] 78% 121/156 [02:04<00:28,  1.24it/s, [0;93mval_acc=76.74, val_loss_cross_entropy=0.790, val_loss_seg=0.790, val_macc=42.13, val_miou=32.99[0m)] 78% 121/156 [02:16<00:28,  1.24it/s, [0;93mval_acc=76.66, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.11, val_miou=33.02[0m)] 78% 122/156 [02:16<02:22,  4.18s/it, [0;93mval_acc=76.66, val_loss_cross_entropy=0.791, val_loss_seg=0.791, val_macc=42.11, val_miou=33.02[0m)] 78% 122/156 [02:17<02:22,  4.18s/it, [0;93mval_acc=76.64, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=42.03, val_miou=32.96[0m)] 79% 123/156 [02:17<01:44,  3.16s/it, [0;93mval_acc=76.64, val_loss_cross_entropy=0.792, val_loss_seg=0.792, val_macc=42.03, val_miou=32.96[0m)] 79% 123/156 [02:17<01:44,  3.16s/it, [0;93mval_acc=76.55, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.97, val_miou=32.87[0m)] 79% 124/156 [02:17<01:17,  2.41s/it, [0;93mval_acc=76.55, val_loss_cross_entropy=0.794, val_loss_seg=0.794, val_macc=41.97, val_miou=32.87[0m)] 79% 124/156 [02:18<01:17,  2.41s/it, [0;93mval_acc=76.48, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=41.96, val_miou=32.85[0m)] 80% 125/156 [02:18<00:57,  1.84s/it, [0;93mval_acc=76.48, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=41.96, val_miou=32.85[0m)] 80% 125/156 [02:18<00:57,  1.84s/it, [0;93mval_acc=76.51, val_loss_cross_entropy=0.797, val_loss_seg=0.797, val_macc=42.00, val_miou=32.91[0m)] 81% 126/156 [02:18<00:43,  1.46s/it, [0;93mval_acc=76.51, val_loss_cross_entropy=0.797, val_loss_seg=0.797, val_macc=42.00, val_miou=32.91[0m)] 81% 126/156 [02:20<00:43,  1.46s/it, [0;93mval_acc=76.45, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=42.01, val_miou=32.89[0m)] 81% 127/156 [02:20<00:44,  1.54s/it, [0;93mval_acc=76.45, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=42.01, val_miou=32.89[0m)] 81% 127/156 [02:20<00:32,  1.11s/it, [0;93mval_acc=76.45, val_loss_cross_entropy=0.798, val_loss_seg=0.798, val_macc=42.01, val_miou=32.89[0m)]this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
this is a val dataset object
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.

Error executing job with overrides: ['data=segmentation/multimodal/Feng/scannet-neucon-smallres', 'models=segmentation/multimodal/sparseconv3d', 'model_name=Res16UNet34-PointPyramid-early-ade20k-interpolate', 'task=segmentation', 'training=Feng/minkowski-pretrained-pyramid-0', 'lr_scheduler=exponential', 'eval_frequency=1', 'data.dataroot=/project/fsun/dvata', 'training.cuda=0', 'training.batch_size=2', 'training.epochs=300', 'training.num_workers=5', 'training.optim.base_lr=0.1', 'training.wandb.log=True', 'training.wandb.name=Res16UNet34-PointPyramid-early-ade20k-interpolate', 'tracker_options.make_submission=False', 'training.checkpoint_dir=']
Traceback (most recent call last):
  File "train.py", line 23, in <module>
    main()
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/main.py", line 95, in decorated_main
    config_name=config_name,
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/_internal/utils.py", line 396, in _run_hydra
    overrides=overrides,
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/_internal/utils.py", line 453, in _run_app
    lambda: hydra.run(
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/_internal/utils.py", line 216, in run_and_report
    raise ex
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/_internal/utils.py", line 213, in run_and_report
    return func()
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/_internal/utils.py", line 456, in <lambda>
    overrides=overrides,
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/_internal/hydra.py", line 132, in run
    _ = ret.return_value
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/core/utils.py", line 260, in return_value
    raise self._return_value
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "train.py", line 15, in main
    trainer.train()
  File "/home/fsun/DeepViewAgg/torch_points3d/trainer.py", line 159, in train
    self._test_epoch(epoch, "val")
  File "/home/fsun/DeepViewAgg/torch_points3d/trainer.py", line 257, in _test_epoch
    for data in tq_loader:
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/tqdm/std.py", line 1195, in __iter__
    for obj in iterable:
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 681, in __next__
    data = self._next_data()
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1356, in _next_data
    return self._process_data(data)
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1402, in _process_data
    data.reraise()
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/_utils.py", line 461, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 2.
Original Traceback (most recent call last):
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/utils/data/_utils/worker.py", line 302, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 49, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/fsun/.conda/envs/pytorch3d/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 49, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/fsun/DeepViewAgg/torch_points3d/datasets/segmentation/multimodal/scannet.py", line 284, in __getitem__
    data, images = self.transform_image(data, images)
  File "/home/fsun/DeepViewAgg/torch_points3d/core/data_transform/multimodal/compose.py", line 13, in __call__
    args = t(*args)
  File "/home/fsun/DeepViewAgg/torch_points3d/core/data_transform/multimodal/image.py", line 56, in __call__
    data_out, images_out = self._process(data, images)
  File "/home/fsun/DeepViewAgg/torch_points3d/core/data_transform/multimodal/image.py", line 638, in _process
    images = images.select_points(data[self.key], mode='pick')
  File "/home/fsun/DeepViewAgg/torch_points3d/core/multimodal/image.py", line 886, in select_points
    images.mappings = mappings.select_images(seen_image_idx)
  File "/home/fsun/DeepViewAgg/torch_points3d/core/multimodal/image.py", line 2049, in select_images
    view_idx = torch.where((self.images[..., None] == idx).any(-1))[0]
RuntimeError: [enforce fail at alloc_cpu.cpp:66] . DefaultCPUAllocator: can't allocate memory: you tried to allocate 1182000960 bytes. Error code 12 (Cannot allocate memory)


wandb: Waiting for W&B process to finish, PID 16316
wandb: Program failed with code 1. Press ctrl-c to abort syncing.
wandb: You can sync this run to the cloud by running: 
wandb: wandb sync wandb/run-20221018_172424-1ds28jfk
