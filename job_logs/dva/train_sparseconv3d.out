[2022-10-15 12:10:42,989][torch_points3d.trainer][INFO] - DEVICE : cuda
wandb: W&B is a tool that helps track and visualize machine learning experiments
wandb: No credentials found.  Run "wandb login" to visualize your metrics
wandb: Tracking run with wandb version 0.8.36
wandb: Wandb version 0.13.4 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Run data is saved locally in wandb/run-20221015_101043-2kfywdtg

self._cfg.training.checkpoint_dir:  
initialize train dataset
initialize val dataset
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-15 12:11:07,314][torch_points3d.applications.modelfactory][INFO] - The config will be used to build the model
backbone.down_modules.4.image.conv
backbone.down_modules.3.image.conv
backbone.down_modules.2.image.conv
backbone.down_modules.1.image.conv
backbone.down_modules.0.image.conv
backbone
head
[2022-10-15 12:11:08,717][torch_points3d.core.schedulers.bn_schedulers][INFO] - Setting batchnorm momentum at 0.02
[2022-10-15 12:11:15,740][torch_points3d.trainer][WARNING] - The model will not be able to be used from pretrained weights without the corresponding dataset. Current properties are {'feature_dimension': 1, 'num_classes': 20}
[2022-10-15 12:11:15,740][torch_points3d.trainer][INFO] - APIModel(
  (backbone): SparseConv3dUnet(
    (inner_modules): ModuleList(
      (0): Identity()
    )
    (down_modules): ModuleList(
      (0): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer0(
            (conv): Sequential(
              (0): Sequential(
                (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (4): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
                (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (7): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                (8): ReLU(inplace=True)
                (9): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=128, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=32, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (1): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer1(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(64, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=64, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=32, out_features=32, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (2): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer2(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                    (1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn2): SynchronizedBatchNorm2d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=128, out_features=64, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (3): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer3(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (bn1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn2): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn1): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn2): SynchronizedBatchNorm2d(256, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=256, out_features=128, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=128, out_features=128, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (4): MultimodalBlockDown(
        (block_1): Identity()
        (block_2): Identity()
        (image): UnimodalBranch(
          drop_3d=None
          drop_mod=None
          keep_last_view=False
          checkpointing=v
          (conv): ADE20KResNet18Layer4(
            (conv): Sequential(
              (0): Sequential(
                (0): BasicBlock(
                  (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
                  (bn1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn2): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (downsample): Sequential(
                    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                    (1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  )
                )
                (1): BasicBlock(
                  (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn1): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                  (relu): ReLU(inplace=True)
                  (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
                  (bn2): SynchronizedBatchNorm2d(512, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
                )
              )
            )
          )
          (atomic_pool): BimodalCSRPool()
          (view_pool): GroupBimodalCSRPool(
            num_groups=4
            use_mod=False
            group_scaling=True
            save_last=False
            (E_map): DeepSetFeat(
              pool=['max']
              fusion=concatenation
              use_num=True
              (mlp_elt_1): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=8, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_set): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=33, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
              (mlp_elt_2): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=64, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
                (1): Sequential(
                  (0): Linear(in_features=32, out_features=32, bias=False)
                  (1): FastBatchNorm1d(
                    (batch_norm): BatchNorm1d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                  )
                  (2): LeakyReLU(negative_slope=0.2, inplace=True)
                )
              )
            )
            (E_mod): Sequential(
              (0): Sequential(
                (0): Linear(in_features=512, out_features=256, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
              (1): Sequential(
                (0): Linear(in_features=256, out_features=256, bias=False)
                (1): FastBatchNorm1d(
                  (batch_norm): BatchNorm1d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                )
                (2): LeakyReLU(negative_slope=0.2, inplace=True)
              )
            )
            (E_score): Linear(in_features=32, out_features=4, bias=True)
            (G): Gating(num_groups=4, weight=True, bias=True)
          )
          (fusion): BimodalFusion(mode=concatenation)
        )
      )
      (5): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=513, out_channels=128, kernel_size=3, stride=1, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (6): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=128, out_channels=32, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=32, out_channels=32, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (7): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=32, out_channels=32, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=32, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=32, out_channels=64, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=64, out_channels=64, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (8): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=64, out_channels=64, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=64, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=64, out_channels=128, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (3): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
      (9): MultimodalBlockDown(
        (block_1): ResNetDown(
          (conv_in): Seq(
            (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
            (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (blocks): Seq(
            (0): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=128, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
              (downsample): Seq(
                (0): Conv3d(in_channels=128, out_channels=256, kernel_size=1, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              )
            )
            (1): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (2): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (3): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (4): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
            (5): ResBlock(
              (block): Seq(
                (0): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Conv3d(in_channels=256, out_channels=256, kernel_size=3, stride=1, dilation=1)
                (4): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
                (5): ReLU(inplace=True)
              )
            )
          )
        )
        (block_2): Identity()
        (image): IdentityBranch()
      )
    )
    (up_modules): ModuleList(
      (0): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=256, out_channels=256, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=384, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=384, out_channels=128, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (1): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=192, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=128, out_channels=128, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=192, out_channels=128, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (2): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=128, out_channels=128, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=160, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=160, out_channels=96, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (3): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=96, out_channels=96, kernel_size=2, stride=2, dilation=1)
          (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=224, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
            (downsample): Seq(
              (0): Conv3d(in_channels=224, out_channels=96, kernel_size=1, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (4): ResNetUp(
        (conv_in): Seq(
          (0): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
          (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (blocks): Seq(
          (0): ResBlock(
            (block): Seq(
              (0): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (1): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv3d(in_channels=96, out_channels=96, kernel_size=3, stride=1, dilation=1)
              (4): BatchNorm(96, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
              (5): ReLU(inplace=True)
            )
          )
        )
      )
    )
  )
  (head): Sequential(
    (0): Linear(in_features=96, out_features=20, bias=True)
  )
)
[2022-10-15 12:11:15,751][torch_points3d.utils.colors][INFO] - [0;32mOptimizer: SGD (
Parameter Group 0
    dampening: 0.1
    foreach: None
    initial_lr: 0.1
    lr: 0.1
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 1
    dampening: 0.1
    foreach: None
    initial_lr: 0.1
    lr: 0.1
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 2
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 3
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 4
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 5
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001

Parameter Group 6
    dampening: 0.1
    foreach: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0001
)[0m
[2022-10-15 12:11:15,751][torch_points3d.utils.colors][INFO] - [0;32mLearning Rate Scheduler: ExponentialLR({'gamma': 0.9885}, update_scheduler_on=on_epoch)[0m
[2022-10-15 12:11:15,751][torch_points3d.utils.colors][INFO] - [0;32mBatchNorm Scheduler: BNMomentumScheduler(base_momentum: 0.02, update_scheduler_on=on_epoch)[0m
[2022-10-15 12:11:15,751][torch_points3d.utils.colors][INFO] - [0;32mAccumulated gradients: None[0m
[2022-10-15 12:11:15,753][torch_points3d.trainer][INFO] - Model size = 44322864
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-15 12:11:15,754][torch_points3d.trainer][INFO] - Dataset: ScannetDatasetMM 
[0;95mtrain_pre_batch_collate_transform [0m= None
[0;95mval_pre_batch_collate_transform [0m= None
[0;95mtest_pre_batch_collate_transform [0m= None
[0;95mpre_transform [0m= Compose([
    SaveOriginalPosId,
    PCAComputePointwise(num_neighbors=50, r=None, use_full_pos=False, use_cuda=False, use_faiss=False, ncells=None, nprobes=10, chunk_size=1000000),
    EigenFeatures(norm=True, linearity=True, planarity=True, scattering=True, temperature=None),
    RemoveAttributes(attr_names=['eigenvalues', 'eigenvectors'], strict=False),
])
[0;95mtest_transform [0m= Compose([
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95mtrain_transform [0m= Compose([
    ElasticDistortion(apply_distorsion=True, granularity=[0.2, 0.8], magnitude=[0.4, 1.6]),
    Random3AxisRotation(apply_rotation=True, rot_x=8, rot_y=8, rot_z=180),
    Random symmetry of axes: x=True, y=True, z=False,
    RandomScaleAnisotropic([0.9, 1.1]),
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95mval_transform [0m= Compose([
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95minference_transform [0m= Compose([
    SaveOriginalPosId,
    PCAComputePointwise(num_neighbors=50, r=None, use_full_pos=False, use_cuda=False, use_faiss=False, ncells=None, nprobes=10, chunk_size=1000000),
    EigenFeatures(norm=True, linearity=True, planarity=True, scattering=True, temperature=None),
    RemoveAttributes(attr_names=['eigenvalues', 'eigenvectors'], strict=False),
    GridSampling3D(grid_size=0.03, quantize_coords=True, mode=last),
    XYZFeature(axis=['z']),
    AddFeatsByKeys(pos_z=True, rgb=False, linearity=False, norm=False, planarity=False, scattering=False),
])
[0;95mpre_transform_image [0m= ComposeMultiModal([
    LoadImages(ref_size=[320, 240], crop_size=None, crop_offsets=None, downscale=None, show_progress=False),
    NonStaticMask(ref_size=(320, 240), proj_upscale=1, n_sample=5),
    MapImages(key=mapping_index, verbose=False, cylinder=False, ref_size=[320, 240], proj_upscale=1, method=SplattingVisibility, use_cuda=False, kwargs={'voxel': 0.03, 'r_max': 8, 'r_min': 0.05, 'exact': True, 'camera': 'scannet'}),
    NeighborhoodBasedMappingFeatures(k_list=[50], voxel=0.01, compute_density=True, compute_occlusion=True, use_faiss=False, use_cuda=False, ncells=None, nprobes=10, verbose=True),
])
[0;95mtest_transform_image [0m= ComposeMultiModal([
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
[0;95mtrain_transform_image [0m= ComposeMultiModal([
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    JitterMappingFeatures(sigma=0.02, clip=0.03),
    ColorJitter(brightness=[0.4, 1.6], contrast=[0.4, 1.6], saturation=[0.30000000000000004, 1.7], hue=None),
    RandomHorizontalFlip(p=0.5),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
[0;95mval_transform_image [0m= ComposeMultiModal([
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
[0;95minference_transform_image [0m= ComposeMultiModal([
    LoadImages(ref_size=[320, 240], crop_size=None, crop_offsets=None, downscale=None, show_progress=False),
    NonStaticMask(ref_size=(320, 240), proj_upscale=1, n_sample=5),
    MapImages(key=mapping_index, verbose=False, cylinder=False, ref_size=[320, 240], proj_upscale=1, method=SplattingVisibility, use_cuda=False, kwargs={'voxel': 0.03, 'r_max': 8, 'r_min': 0.05, 'exact': True, 'camera': 'scannet'}),
    NeighborhoodBasedMappingFeatures(k_list=[50], voxel=0.01, compute_density=True, compute_occlusion=True, use_faiss=False, use_cuda=False, ncells=None, nprobes=10, verbose=True),
    SelectMappingFromPointId(key=mapping_index),
    ToImageData(),
    PickImagesFromMemoryCredit(credit=1920000, use_coverage=True, k_coverage=2),
    ToFloatImage(),
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
Size of [0;95mtrain_dataset [0m= 1201
Size of [0;95mtest_dataset [0m= 0
Size of [0;95mval_dataset [0m= 312
[0;95mBatch size =[0m 2
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-15 12:11:18,394][torch_points3d.datasets.base_dataset][INFO] - Available stage selection datasets: [0;95m ['val'] [0m
[2022-10-15 12:11:18,394][torch_points3d.datasets.base_dataset][INFO] - The models will be selected using the metrics on following dataset: [0;95m val [0m
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
[2022-10-15 12:11:20,544][torch_points3d.trainer][INFO] - EPOCH 1 / 300
 DeepViewAgg/torch_points3d/datasets/segmentation/scannet.py,
        line 1118:
        (Feng) on my conda installation, this block causes a max 
        depth recursion error. Return super().indices() for now as it 
        results in no problems on my torch_geometric=1.7.2 and 
        pytorch=1.12.1 installation.
  0% 0/601 [00:00<?, ?it/s]  0% 0/601 [00:15<?, ?it/s, [0;92mdata_loading=10.79, iteration=4.621, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  0% 1/601 [00:15<2:34:09, 15.42s/it, [0;92mdata_loading=10.79, iteration=4.621, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  0% 1/601 [00:17<2:34:09, 15.42s/it, [0;92mdata_loading=0.075, iteration=1.562, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  0% 2/601 [00:17<1:12:59,  7.31s/it, [0;92mdata_loading=0.075, iteration=1.562, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  0% 2/601 [00:18<1:12:59,  7.31s/it, [0;92mdata_loading=0.000, iteration=1.793, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  0% 3/601 [00:18<47:45,  4.79s/it, [0;92mdata_loading=0.000, iteration=1.793, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]    0% 3/601 [00:20<47:45,  4.79s/it, [0;92mdata_loading=0.008, iteration=1.488, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 4/601 [00:20<34:44,  3.49s/it, [0;92mdata_loading=0.008, iteration=1.488, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 4/601 [00:21<34:44,  3.49s/it, [0;92mdata_loading=0.000, iteration=1.457, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 5/601 [00:21<27:23,  2.76s/it, [0;92mdata_loading=0.000, iteration=1.457, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 5/601 [00:23<27:23,  2.76s/it, [0;92mdata_loading=0.000, iteration=1.299, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 6/601 [00:23<22:26,  2.26s/it, [0;92mdata_loading=0.000, iteration=1.299, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 6/601 [00:24<22:26,  2.26s/it, [0;92mdata_loading=0.118, iteration=1.414, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 7/601 [00:24<20:02,  2.02s/it, [0;92mdata_loading=0.118, iteration=1.414, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 7/601 [00:26<20:02,  2.02s/it, [0;92mdata_loading=0.000, iteration=1.711, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 8/601 [00:26<19:01,  1.92s/it, [0;92mdata_loading=0.000, iteration=1.711, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 8/601 [00:27<19:01,  1.92s/it, [0;92mdata_loading=0.000, iteration=1.390, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 9/601 [00:27<17:20,  1.76s/it, [0;92mdata_loading=0.000, iteration=1.390, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  1% 9/601 [00:29<17:20,  1.76s/it, [0;92mdata_loading=0.008, iteration=1.915, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  2% 10/601 [00:29<17:49,  1.81s/it, [0;92mdata_loading=0.008, iteration=1.915, train_acc=0.826, train_loss_cross_entropy=3.561, train_loss_seg=3.561, train_macc=4.819, train_miou=0.32 [0m)]  2% 10/601 [00:30<17:49,  1.81s/it, [0;92mdata_loading=0.000, iteration=1.239, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 11/601 [00:30<16:04,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.239, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 11/601 [00:32<16:04,  1.63s/it, [0;92mdata_loading=0.099, iteration=1.705, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 12/601 [00:32<16:33,  1.69s/it, [0;92mdata_loading=0.099, iteration=1.705, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 12/601 [00:34<16:33,  1.69s/it, [0;92mdata_loading=0.019, iteration=1.623, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 13/601 [00:34<16:23,  1.67s/it, [0;92mdata_loading=0.019, iteration=1.623, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 13/601 [00:35<16:23,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.390, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 14/601 [00:35<15:32,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.390, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 14/601 [00:37<15:32,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.704, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 15/601 [00:37<15:51,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.704, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  2% 15/601 [00:38<15:51,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.475, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 16/601 [00:38<15:23,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.475, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 16/601 [00:40<15:23,  1.58s/it, [0;92mdata_loading=0.015, iteration=1.587, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 17/601 [00:40<15:26,  1.59s/it, [0;92mdata_loading=0.015, iteration=1.587, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 17/601 [00:41<15:26,  1.59s/it, [0;92mdata_loading=0.011, iteration=1.410, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 18/601 [00:41<14:56,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.410, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 18/601 [00:43<14:56,  1.54s/it, [0;92mdata_loading=0.088, iteration=1.649, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 19/601 [00:43<15:29,  1.60s/it, [0;92mdata_loading=0.088, iteration=1.649, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 19/601 [00:45<15:29,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.754, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 20/601 [00:45<15:57,  1.65s/it, [0;92mdata_loading=0.011, iteration=1.754, train_acc=28.88, train_loss_cross_entropy=2.786, train_loss_seg=2.786, train_macc=10.91, train_miou=3.676[0m)]  3% 20/601 [00:47<15:57,  1.65s/it, [0;92mdata_loading=0.000, iteration=1.773, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  3% 21/601 [00:47<16:17,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.773, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  3% 21/601 [00:49<16:17,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.781, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 22/601 [00:49<16:33,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.781, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 22/601 [00:50<16:33,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.364, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 23/601 [00:50<15:30,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.364, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 23/601 [00:51<15:30,  1.61s/it, [0;92mdata_loading=0.074, iteration=1.518, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 24/601 [00:51<15:26,  1.61s/it, [0;92mdata_loading=0.074, iteration=1.518, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 24/601 [00:53<15:26,  1.61s/it, [0;92mdata_loading=0.011, iteration=1.560, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 25/601 [00:53<15:18,  1.60s/it, [0;92mdata_loading=0.011, iteration=1.560, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 25/601 [00:55<15:18,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.606, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 26/601 [00:55<15:19,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.606, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 26/601 [00:56<15:19,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.422, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 27/601 [00:56<14:47,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.422, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  4% 27/601 [00:58<14:47,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.562, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  5% 28/601 [00:58<14:50,  1.55s/it, [0;92mdata_loading=0.010, iteration=1.562, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  5% 28/601 [00:59<14:50,  1.55s/it, [0;92mdata_loading=0.067, iteration=1.445, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  5% 29/601 [00:59<14:42,  1.54s/it, [0;92mdata_loading=0.067, iteration=1.445, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  5% 29/601 [01:01<14:42,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.783, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  5% 30/601 [01:01<15:23,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.783, train_acc=50.67, train_loss_cross_entropy=2.321, train_loss_seg=2.321, train_macc=10.68, train_miou=5.844[0m)]  5% 30/601 [01:02<15:23,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.341, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  5% 31/601 [01:02<14:35,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.341, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  5% 31/601 [01:04<14:35,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.368, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  5% 32/601 [01:04<14:05,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.368, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  5% 32/601 [01:05<14:05,  1.49s/it, [0;92mdata_loading=0.011, iteration=1.428, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  5% 33/601 [01:05<13:55,  1.47s/it, [0;92mdata_loading=0.011, iteration=1.428, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  5% 33/601 [01:06<13:55,  1.47s/it, [0;92mdata_loading=0.079, iteration=1.205, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 34/601 [01:06<13:22,  1.42s/it, [0;92mdata_loading=0.079, iteration=1.205, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 34/601 [01:08<13:22,  1.42s/it, [0;92mdata_loading=0.010, iteration=1.350, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 35/601 [01:08<13:12,  1.40s/it, [0;92mdata_loading=0.010, iteration=1.350, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 35/601 [01:09<13:12,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.413, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 36/601 [01:09<13:13,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.413, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 36/601 [01:10<13:13,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.280, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 37/601 [01:10<12:51,  1.37s/it, [0;92mdata_loading=0.000, iteration=1.280, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 37/601 [01:12<12:51,  1.37s/it, [0;92mdata_loading=0.011, iteration=1.178, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 38/601 [01:12<12:19,  1.31s/it, [0;92mdata_loading=0.011, iteration=1.178, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 38/601 [01:13<12:19,  1.31s/it, [0;92mdata_loading=0.019, iteration=1.762, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 39/601 [01:13<13:37,  1.45s/it, [0;92mdata_loading=0.019, iteration=1.762, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  6% 39/601 [01:15<13:37,  1.45s/it, [0;92mdata_loading=0.016, iteration=1.498, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  7% 40/601 [01:15<13:46,  1.47s/it, [0;92mdata_loading=0.016, iteration=1.498, train_acc=55.29, train_loss_cross_entropy=2.052, train_loss_seg=2.052, train_macc=11.18, train_miou=6.347[0m)]  7% 40/601 [01:16<13:46,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.401, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 41/601 [01:16<13:32,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.401, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 41/601 [01:18<13:32,  1.45s/it, [0;92mdata_loading=0.014, iteration=1.635, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 42/601 [01:18<14:04,  1.51s/it, [0;92mdata_loading=0.014, iteration=1.635, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 42/601 [01:20<14:04,  1.51s/it, [0;92mdata_loading=0.010, iteration=1.575, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 43/601 [01:20<14:15,  1.53s/it, [0;92mdata_loading=0.010, iteration=1.575, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 43/601 [01:22<14:15,  1.53s/it, [0;92mdata_loading=0.076, iteration=2.151, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 44/601 [01:22<16:10,  1.74s/it, [0;92mdata_loading=0.076, iteration=2.151, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 44/601 [01:23<16:10,  1.74s/it, [0;92mdata_loading=0.000, iteration=1.558, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 45/601 [01:23<15:37,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.558, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  7% 45/601 [01:25<15:37,  1.69s/it, [0;92mdata_loading=0.000, iteration=1.249, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 46/601 [01:25<14:23,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.249, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 46/601 [01:26<14:23,  1.56s/it, [0;92mdata_loading=0.019, iteration=1.472, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 47/601 [01:26<14:11,  1.54s/it, [0;92mdata_loading=0.019, iteration=1.472, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 47/601 [01:27<14:11,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.371, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 48/601 [01:27<13:42,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.371, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 48/601 [01:29<13:42,  1.49s/it, [0;92mdata_loading=0.067, iteration=1.557, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 49/601 [01:29<14:03,  1.53s/it, [0;92mdata_loading=0.067, iteration=1.557, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 49/601 [01:31<14:03,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.719, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 50/601 [01:31<14:33,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.719, train_acc=53.45, train_loss_cross_entropy=2.159, train_loss_seg=2.159, train_macc=10.28, train_miou=6.285[0m)]  8% 50/601 [01:32<14:33,  1.59s/it, [0;92mdata_loading=0.000, iteration=1.426, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  8% 51/601 [01:32<14:06,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.426, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  8% 51/601 [01:33<14:06,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.196, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 52/601 [01:33<13:10,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.196, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 52/601 [01:35<13:10,  1.44s/it, [0;92mdata_loading=0.010, iteration=1.630, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 53/601 [01:35<13:41,  1.50s/it, [0;92mdata_loading=0.010, iteration=1.630, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 53/601 [01:36<13:41,  1.50s/it, [0;92mdata_loading=0.080, iteration=1.189, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 54/601 [01:36<13:02,  1.43s/it, [0;92mdata_loading=0.080, iteration=1.189, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 54/601 [01:38<13:02,  1.43s/it, [0;92mdata_loading=0.000, iteration=1.586, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 55/601 [01:38<13:26,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.586, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 55/601 [01:40<13:26,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.554, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 56/601 [01:40<13:38,  1.50s/it, [0;92mdata_loading=0.000, iteration=1.554, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 56/601 [01:41<13:38,  1.50s/it, [0;92mdata_loading=0.013, iteration=1.839, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 57/601 [01:41<14:34,  1.61s/it, [0;92mdata_loading=0.013, iteration=1.839, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)]  9% 57/601 [01:43<14:34,  1.61s/it, [0;92mdata_loading=0.016, iteration=1.841, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)] 10% 58/601 [01:43<15:13,  1.68s/it, [0;92mdata_loading=0.016, iteration=1.841, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)] 10% 58/601 [01:45<15:13,  1.68s/it, [0;92mdata_loading=0.020, iteration=1.981, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)] 10% 59/601 [01:45<16:03,  1.78s/it, [0;92mdata_loading=0.020, iteration=1.981, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)] 10% 59/601 [01:47<16:03,  1.78s/it, [0;92mdata_loading=0.000, iteration=1.690, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)] 10% 60/601 [01:47<15:47,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.690, train_acc=54.78, train_loss_cross_entropy=2.044, train_loss_seg=2.044, train_macc=10.38, train_miou=6.955[0m)] 10% 60/601 [01:49<15:47,  1.75s/it, [0;92mdata_loading=0.051, iteration=2.088, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 10% 61/601 [01:49<16:48,  1.87s/it, [0;92mdata_loading=0.051, iteration=2.088, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 10% 61/601 [01:51<16:48,  1.87s/it, [0;92mdata_loading=0.000, iteration=2.050, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 10% 62/601 [01:51<17:16,  1.92s/it, [0;92mdata_loading=0.000, iteration=2.050, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 10% 62/601 [01:53<17:16,  1.92s/it, [0;92mdata_loading=0.000, iteration=1.453, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 10% 63/601 [01:53<15:58,  1.78s/it, [0;92mdata_loading=0.000, iteration=1.453, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 10% 63/601 [01:54<15:58,  1.78s/it, [0;92mdata_loading=0.000, iteration=1.225, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 64/601 [01:54<14:27,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.225, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 64/601 [01:55<14:27,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.616, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 65/601 [01:55<14:26,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.616, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 65/601 [01:57<14:26,  1.62s/it, [0;92mdata_loading=0.085, iteration=1.624, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 66/601 [01:57<14:39,  1.64s/it, [0;92mdata_loading=0.085, iteration=1.624, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 66/601 [01:59<14:39,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.405, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 67/601 [01:59<13:59,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.405, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 67/601 [02:00<13:59,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.850, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 68/601 [02:00<14:42,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.850, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 68/601 [02:02<14:42,  1.66s/it, [0;92mdata_loading=0.000, iteration=1.544, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 69/601 [02:02<14:23,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.544, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 11% 69/601 [02:04<14:23,  1.62s/it, [0;92mdata_loading=0.016, iteration=1.601, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 12% 70/601 [02:04<14:21,  1.62s/it, [0;92mdata_loading=0.016, iteration=1.601, train_acc=58.66, train_loss_cross_entropy=1.928, train_loss_seg=1.928, train_macc=10.89, train_miou=8.021[0m)] 12% 70/601 [02:05<14:21,  1.62s/it, [0;92mdata_loading=0.079, iteration=1.843, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 71/601 [02:05<15:07,  1.71s/it, [0;92mdata_loading=0.079, iteration=1.843, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 71/601 [02:07<15:07,  1.71s/it, [0;92mdata_loading=0.011, iteration=1.827, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 72/601 [02:07<15:25,  1.75s/it, [0;92mdata_loading=0.011, iteration=1.827, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 72/601 [02:09<15:25,  1.75s/it, [0;92mdata_loading=0.000, iteration=1.382, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 73/601 [02:09<14:25,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.382, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 73/601 [02:10<14:25,  1.64s/it, [0;92mdata_loading=0.000, iteration=1.440, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 74/601 [02:10<13:52,  1.58s/it, [0;92mdata_loading=0.000, iteration=1.440, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 74/601 [02:12<13:52,  1.58s/it, [0;92mdata_loading=0.010, iteration=1.901, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 75/601 [02:12<14:43,  1.68s/it, [0;92mdata_loading=0.010, iteration=1.901, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 12% 75/601 [02:14<14:43,  1.68s/it, [0;92mdata_loading=0.078, iteration=1.580, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 76/601 [02:14<14:38,  1.67s/it, [0;92mdata_loading=0.078, iteration=1.580, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 76/601 [02:15<14:38,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.638, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 77/601 [02:15<14:33,  1.67s/it, [0;92mdata_loading=0.011, iteration=1.638, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 77/601 [02:17<14:33,  1.67s/it, [0;92mdata_loading=0.000, iteration=1.227, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 78/601 [02:17<13:22,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.227, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 78/601 [02:18<13:22,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.137, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 79/601 [02:18<12:19,  1.42s/it, [0;92mdata_loading=0.000, iteration=1.137, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 79/601 [02:19<12:19,  1.42s/it, [0;92mdata_loading=0.011, iteration=1.484, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 80/601 [02:19<12:30,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.484, train_acc=58.00, train_loss_cross_entropy=1.887, train_loss_seg=1.887, train_macc=11.57, train_miou=8.230[0m)] 13% 80/601 [02:21<12:30,  1.44s/it, [0;92mdata_loading=0.023, iteration=1.510, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 13% 81/601 [02:21<12:43,  1.47s/it, [0;92mdata_loading=0.023, iteration=1.510, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 13% 81/601 [02:22<12:43,  1.47s/it, [0;92mdata_loading=0.015, iteration=1.212, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 82/601 [02:22<12:04,  1.40s/it, [0;92mdata_loading=0.015, iteration=1.212, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 82/601 [02:24<12:04,  1.40s/it, [0;92mdata_loading=0.000, iteration=1.577, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 83/601 [02:24<12:31,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.577, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 83/601 [02:25<12:31,  1.45s/it, [0;92mdata_loading=0.013, iteration=1.608, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 84/601 [02:25<12:56,  1.50s/it, [0;92mdata_loading=0.013, iteration=1.608, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 84/601 [02:27<12:56,  1.50s/it, [0;92mdata_loading=0.013, iteration=1.639, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 85/601 [02:27<13:18,  1.55s/it, [0;92mdata_loading=0.013, iteration=1.639, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 85/601 [02:28<13:18,  1.55s/it, [0;92mdata_loading=0.017, iteration=1.329, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 86/601 [02:28<12:46,  1.49s/it, [0;92mdata_loading=0.017, iteration=1.329, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 86/601 [02:30<12:46,  1.49s/it, [0;92mdata_loading=0.013, iteration=1.641, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 87/601 [02:30<13:10,  1.54s/it, [0;92mdata_loading=0.013, iteration=1.641, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 14% 87/601 [02:31<13:10,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.589, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 15% 88/601 [02:31<13:17,  1.55s/it, [0;92mdata_loading=0.000, iteration=1.589, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 15% 88/601 [02:33<13:17,  1.55s/it, [0;92mdata_loading=0.082, iteration=1.525, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 15% 89/601 [02:33<13:23,  1.57s/it, [0;92mdata_loading=0.082, iteration=1.525, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 15% 89/601 [02:34<13:23,  1.57s/it, [0;92mdata_loading=0.000, iteration=1.452, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 15% 90/601 [02:34<13:04,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.452, train_acc=60.22, train_loss_cross_entropy=1.786, train_loss_seg=1.786, train_macc=12.58, train_miou=9.073[0m)] 15% 90/601 [02:36<13:04,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.324, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 15% 91/601 [02:36<12:30,  1.47s/it, [0;92mdata_loading=0.000, iteration=1.324, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 15% 91/601 [02:37<12:30,  1.47s/it, [0;92mdata_loading=0.010, iteration=1.656, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 15% 92/601 [02:37<12:58,  1.53s/it, [0;92mdata_loading=0.010, iteration=1.656, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 15% 92/601 [02:39<12:58,  1.53s/it, [0;92mdata_loading=0.000, iteration=1.638, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 15% 93/601 [02:39<13:13,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.638, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 15% 93/601 [02:41<13:13,  1.56s/it, [0;92mdata_loading=0.076, iteration=1.637, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 94/601 [02:41<13:35,  1.61s/it, [0;92mdata_loading=0.076, iteration=1.637, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 94/601 [02:42<13:35,  1.61s/it, [0;92mdata_loading=0.000, iteration=1.451, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 95/601 [02:42<13:10,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.451, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 95/601 [02:43<13:10,  1.56s/it, [0;92mdata_loading=0.000, iteration=1.209, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 96/601 [02:43<12:15,  1.46s/it, [0;92mdata_loading=0.000, iteration=1.209, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 96/601 [02:45<12:15,  1.46s/it, [0;92mdata_loading=0.008, iteration=1.476, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 97/601 [02:45<12:18,  1.47s/it, [0;92mdata_loading=0.008, iteration=1.476, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 97/601 [02:47<12:18,  1.47s/it, [0;92mdata_loading=0.022, iteration=1.736, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 98/601 [02:47<13:01,  1.55s/it, [0;92mdata_loading=0.022, iteration=1.736, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 98/601 [02:48<13:01,  1.55s/it, [0;92mdata_loading=0.011, iteration=1.382, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 99/601 [02:48<12:35,  1.51s/it, [0;92mdata_loading=0.011, iteration=1.382, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 16% 99/601 [02:49<12:35,  1.51s/it, [0;92mdata_loading=0.000, iteration=1.128, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 17% 100/601 [02:49<11:37,  1.39s/it, [0;92mdata_loading=0.000, iteration=1.128, train_acc=60.23, train_loss_cross_entropy=1.744, train_loss_seg=1.744, train_macc=13.21, train_miou=9.545[0m)] 17% 100/601 [02:51<11:37,  1.39s/it, [0;92mdata_loading=0.009, iteration=1.759, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 101/601 [02:51<12:32,  1.51s/it, [0;92mdata_loading=0.009, iteration=1.759, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 101/601 [02:53<12:32,  1.51s/it, [0;92mdata_loading=0.019, iteration=2.213, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 102/601 [02:53<14:20,  1.72s/it, [0;92mdata_loading=0.019, iteration=2.213, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 102/601 [02:54<14:20,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.113, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 103/601 [02:54<12:47,  1.54s/it, [0;92mdata_loading=0.000, iteration=1.113, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 103/601 [02:56<12:47,  1.54s/it, [0;92mdata_loading=0.011, iteration=1.193, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 104/601 [02:56<11:55,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.193, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 104/601 [02:57<11:55,  1.44s/it, [0;92mdata_loading=0.011, iteration=1.887, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 105/601 [02:57<13:02,  1.58s/it, [0;92mdata_loading=0.011, iteration=1.887, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 17% 105/601 [03:00<13:02,  1.58s/it, [0;92mdata_loading=0.020, iteration=2.059, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 106/601 [03:00<14:15,  1.73s/it, [0;92mdata_loading=0.020, iteration=2.059, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 106/601 [03:01<14:15,  1.73s/it, [0;92mdata_loading=0.008, iteration=1.845, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 107/601 [03:01<14:32,  1.77s/it, [0;92mdata_loading=0.008, iteration=1.845, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 107/601 [03:03<14:32,  1.77s/it, [0;92mdata_loading=0.000, iteration=1.734, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 108/601 [03:03<14:26,  1.76s/it, [0;92mdata_loading=0.000, iteration=1.734, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 108/601 [03:05<14:26,  1.76s/it, [0;92mdata_loading=0.011, iteration=1.552, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 109/601 [03:05<13:55,  1.70s/it, [0;92mdata_loading=0.011, iteration=1.552, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 109/601 [03:06<13:55,  1.70s/it, [0;92mdata_loading=0.010, iteration=1.422, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 110/601 [03:06<13:15,  1.62s/it, [0;92mdata_loading=0.010, iteration=1.422, train_acc=60.58, train_loss_cross_entropy=1.702, train_loss_seg=1.702, train_macc=13.46, train_miou=9.730[0m)] 18% 110/601 [03:07<13:15,  1.62s/it, [0;92mdata_loading=0.010, iteration=1.260, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 18% 111/601 [03:07<12:22,  1.52s/it, [0;92mdata_loading=0.010, iteration=1.260, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 18% 111/601 [03:09<12:22,  1.52s/it, [0;92mdata_loading=0.026, iteration=1.281, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 112/601 [03:09<11:50,  1.45s/it, [0;92mdata_loading=0.026, iteration=1.281, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 112/601 [03:10<11:50,  1.45s/it, [0;92mdata_loading=0.000, iteration=1.404, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 113/601 [03:10<11:42,  1.44s/it, [0;92mdata_loading=0.000, iteration=1.404, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 113/601 [03:12<11:42,  1.44s/it, [0;92mdata_loading=0.019, iteration=2.038, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 114/601 [03:12<13:11,  1.62s/it, [0;92mdata_loading=0.019, iteration=2.038, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 114/601 [03:14<13:11,  1.62s/it, [0;92mdata_loading=0.000, iteration=1.549, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 115/601 [03:14<12:58,  1.60s/it, [0;92mdata_loading=0.000, iteration=1.549, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 115/601 [03:15<12:58,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.580, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 116/601 [03:15<12:55,  1.60s/it, [0;92mdata_loading=0.010, iteration=1.580, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 116/601 [03:17<12:55,  1.60s/it, [0;92mdata_loading=0.026, iteration=1.968, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 117/601 [03:17<13:51,  1.72s/it, [0;92mdata_loading=0.026, iteration=1.968, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 19% 117/601 [03:19<13:51,  1.72s/it, [0;92mdata_loading=0.000, iteration=1.414, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 20% 118/601 [03:19<13:05,  1.63s/it, [0;92mdata_loading=0.000, iteration=1.414, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 20% 118/601 [03:20<13:05,  1.63s/it, [0;92mdata_loading=0.011, iteration=1.583, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 20% 119/601 [03:20<12:59,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.583, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 20% 119/601 [03:22<12:59,  1.62s/it, [0;92mdata_loading=0.011, iteration=1.743, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 20% 120/601 [03:22<13:17,  1.66s/it, [0;92mdata_loading=0.011, iteration=1.743, train_acc=61.37, train_loss_cross_entropy=1.615, train_loss_seg=1.615, train_macc=13.57, train_miou=9.838[0m)] 20% 120/601 [03:23<13:17,  1.66s/it, [0;92mdata_loading=0.009, iteration=1.320, train_acc=61.50, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.76, train_miou=9.921[0m)] 20% 121/601 [03:23<12:28,  1.56s/it, [0;92mdata_loading=0.009, iteration=1.320, train_acc=61.50, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.76, train_miou=9.921[0m)] 20% 121/601 [03:25<12:28,  1.56s/it, [0;92mdata_loading=0.029, iteration=1.247, train_acc=61.50, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.76, train_miou=9.921[0m)] 20% 122/601 [03:25<11:46,  1.48s/it, [0;92mdata_loading=0.029, iteration=1.247, train_acc=61.50, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.76, train_miou=9.921[0m)] 20% 122/601 [03:26<11:46,  1.48s/it, [0;92mdata_loading=0.000, iteration=1.517, train_acc=61.50, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.76, train_miou=9.921[0m)] 20% 123/601 [03:26<11:51,  1.49s/it, [0;92mdata_loading=0.000, iteration=1.517, train_acc=61.50, train_loss_cross_entropy=1.582, train_loss_seg=1.582, train_macc=13.76, train_miou=9.921[0m)]